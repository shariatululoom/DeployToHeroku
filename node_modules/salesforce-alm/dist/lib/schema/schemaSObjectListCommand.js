"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
var Type;
(function (Type) {
    Type[Type["ALL"] = 0] = "ALL";
    Type[Type["STANDARD"] = 1] = "STANDARD";
    Type[Type["CUSTOM"] = 2] = "CUSTOM";
})(Type = exports.Type || (exports.Type = {}));
class SchemaSObjectListCommand {
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            context.flags.sobjecttypecategory = Type[context.flags.sobjecttypecategory.toUpperCase()];
            if (context.flags.sobjecttypecategory === undefined) {
                throw new Error(Messages.get('SchemaSObjectListTypeInvalidValue'));
            }
            return yield exports.describeObjectsOfType(context);
        });
    }
}
exports.SchemaSObjectListCommand = SchemaSObjectListCommand;
exports.describeObjectsOfType = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        const typeDescriptions = [];
        const conn = yield Config.getActiveConnection(context);
        const allDescriptions = yield conn.describeGlobal();
        let havePrinted = false;
        allDescriptions['sobjects'].forEach(function (sobject) {
            const isCustom = sobject.custom === true;
            const doPrint = (context.flags.sobjecttypecategory === Type.ALL) ||
                (context.flags.sobjecttypecategory === Type.CUSTOM && isCustom) ||
                (context.flags.sobjecttypecategory === Type.STANDARD && !isCustom);
            if (doPrint) {
                havePrinted = true;
                Display.info(sobject.name);
                typeDescriptions.push(sobject.name);
            }
        });
        if (!havePrinted) {
            Display.info(Messages.get('SchemaSObjectListObjectOfTypeNotFound', Type[context.flags.sobjecttypecategory]));
        }
        return typeDescriptions;
    });
};

//# sourceMappingURL=schemaSObjectListCommand.js.map
