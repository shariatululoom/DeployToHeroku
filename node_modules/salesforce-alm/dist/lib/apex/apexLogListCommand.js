"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Config = require("../../lib/force-cli-config");
const Error = require("../../lib/force-cli-error");
const Display = require("../../lib/force-cli-display");
const logApi = require("../logApi");
const util = require("util");
let logger;
class ApexLogListCommand {
    constructor() {
        logger = logApi.child('apex:log:list');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield exports.listLogs(context);
        });
    }
}
exports.ApexLogListCommand = ApexLogListCommand;
let createLogListUrl = function (conn) {
    return util.format('%s/services/data/v%s/tooling/query/?q=Select+Id,+Application,+DurationMilliseconds,+Location,' +
        '+LogLength,+LogUser.Name,+Operation,+Request,StartTime,+Status+From+ApexLog+Order+By+StartTime', conn.instanceUrl, conn.version);
};
let getReq = function (conn, geturl, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        yield conn.requestGet(geturl, function (err, response) {
            if (err) {
                logger.error(err);
                Error.exitWithMessage(err.message);
            }
            callback(response);
        });
    });
};
/**
 * fetch summary information for all debug logs
 * exposed for unit testing (mocked)
 */
exports.listLogs = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let conn = yield Config.getActiveConnection(context);
            let geturl = createLogListUrl(conn);
            let logs = [];
            yield getReq(conn, geturl, function (response) {
                logs = (response.records);
                // shorten ISO format by removing milliseconds, but retain timezone information
                logs.forEach(function (log) {
                    let msStart = log.StartTime.indexOf('.');
                    let msEnd = msStart + 4;
                    let timezone = '';
                    if (log.StartTime.length > msEnd) {
                        timezone = log.StartTime.substring(msEnd, log.StartTime.length);
                    }
                    log.StartTime = log.StartTime.substring(0, msStart) + timezone;
                });
                Display.debugLogs(logs);
            });
            return logs;
        }
        catch (err) {
            logger.error(err);
            return Error.exitWithMessage(err.message);
        }
    });
};

//# sourceMappingURL=apexLogListCommand.js.map
