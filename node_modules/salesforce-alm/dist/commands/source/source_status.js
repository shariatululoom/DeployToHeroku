/*
 * Copyright, 1999-2016, salesforce.com
 * All Rights Reserved
 * Company Confidential
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('statusCommandCliDescription'),
        longDescription: messages.getMessage('statusCommandCliLongDescription'),
        help: messages.getMessage('statusCommandCliHelp'),
        showProgress: true,
        supportsTargetUsername: true,
        flags: [
            {
                name: 'all',
                char: 'a',
                description: messages.getMessage('statusCommandAllOptionDescription'),
                longDescription: messages.getMessage('statusCommandAllOptionDescriptionLong'),
                required: false,
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'local',
                char: 'l',
                description: messages.getMessage('statusCommandLocalOptionDescription'),
                longDescription: messages.getMessage('statusCommandLocalOptionDescriptionLong'),
                required: false,
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'remote',
                char: 'r',
                description: messages.getMessage('statusCommandRemoteOptionDescription'),
                longDescription: messages.getMessage('statusCommandRemoteOptionDescriptionLong'),
                required: false,
                hasValue: false,
                type: 'flag'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const _ = require('lodash');
            const SrcStatusCommand = require(path.join(__dirname, '..', '..', 'lib', 'srcStatusCommand'));
            if ((_.isNil(context.flags.local) && _.isNil(context.flags.remote)) || context.flags.all) {
                context.local = true;
                context.remote = true;
            }
            else if (context.flags.local) {
                context.local = true;
            }
            else if (context.flags.remote) {
                context.remote = true;
            }
            const command = new SrcStatusCommand(context);
            return _execCommand(command, context);
        }
    };
};

//# sourceMappingURL=source_status.js.map
