/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Local
const almError = require(path.join(__dirname, 'almError'));
function _close(request) {
    request.connection.end();
    request.connection.destroy();
}
/**
 * Express request handler for the OauthRedirect. The OAuth redirect url configured in the Connected App must be
 * http://localhost:<port>/OauthRedirect
 * @param orgApi - The scratch org api.
 * @param oauthConfig - Object containing the necessary OAuth configuration parameters.
 * @param request - The http request.
 * @param response - The http response.
 * @param validateState - Callback for testing request forgeries.
 * @param callback - The callback invoked on err or success.
 */
const OauthRequestGet = function (orgApi, oauthConfig, request, response, validateState, callback, orgType) {
    const force = orgApi.force;
    const code = request.query.code;
    if (!validateState(request.query.state)) {
        const error = almError('urlStateMismatch');
        response.status('400').send(`${error.message}\n`);
        response.end();
        _close(request);
        return callback(error);
    }
    else {
        oauthConfig.authCode = code;
        return force.authorizeAndSave(oauthConfig, orgApi, orgType)
            .then(() => force.getOrgFrontDoor(orgApi, false))
            .then(responseUrl => {
            response.redirect(303, responseUrl);
            response.end();
            return callback();
        })
            .catch(callback)
            .finally(() => {
            _close(request);
        });
    }
};
module.exports.OauthRequestGet = OauthRequestGet;

//# sourceMappingURL=oauthRequest.js.map
