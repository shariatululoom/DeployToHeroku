"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Error = require("../../lib/force-cli-error");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
const TextUtils = require("../../lib/force-cli-textutils");
let logger;
class DataRecordCreateCommand {
    constructor() {
        logger = logApi.child('data:record:create');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.flags.sobjecttype && context.flags.values) {
                return yield exports.createRecord(context);
            }
            else {
                Error.exitDisplayHelp(context.command);
            }
        });
    }
}
exports.DataRecordCreateCommand = DataRecordCreateCommand;
exports.createRecord = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        const conn = yield Config.getActiveConnection(context);
        const sobject = context.flags.sobjecttype;
        const insertObject = yield exports.createInsertObject(context);
        const result = context.flags.usetoolingapi ?
            yield conn.tooling.create(sobject, insertObject) : yield conn.sobject(sobject).create(insertObject);
        if (result.success) {
            let id = 'unknown id';
            if (result.id) {
                id = result.id;
            }
            Display.success(Messages.get('DataRecordCreateSuccess', id));
        }
        else {
            let errors = '';
            if (result.errors) {
                errors = '\nErrors:\n';
                result.errors.forEach(function (err) {
                    errors += '  ' + err + '\n';
                });
            }
            Display.failure(Messages.get('DataRecordCreateFailure', errors));
        }
        return result;
    });
};
exports.createInsertObject = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        const keyValuePairs = TextUtils.parseKeyValueSequence(context.flags.values);
        return TextUtils.transformKeyValueSequence(keyValuePairs);
    });
};

//# sourceMappingURL=dataRecordCreateCommand.js.map
