"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importScratchOrgCred = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Here be üêâ
        /* _getConnection only sets up the listener for a token refresh but does
         * not actually check if the token is old. Need to do a subsequent call
         * with the connection object for it to check and do a refresh.
         */
        let conn = yield context.org.force._getConnection(context.org, context.org.config);
        yield conn.requestGet(conn._baseUrl());
        return conn;
    });
};
exports.getActiveConnection = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        // if (TestUtil.isIntegrationTesting()) {
        //     let loginUrl = TestUtil.getTestInstance();
        //     let username = TestUtil.getTestUsername();
        //     let password = TestUtil.getTestPassword();
        //     let connection = new Connection();
        //     connection.loginUrl = loginUrl;
        //     await connection.loginBySoap(username, password);
        //     return connection;
        // } else {
        return yield exports.importScratchOrgCred(context);
        // }
    });
};

//# sourceMappingURL=force-cli-config.js.map
