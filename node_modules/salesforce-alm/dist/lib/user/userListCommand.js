"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
const _ = require("lodash");
const messages = require("../messages");
const almError = require("../almError");
const command_1 = require("../command");
const Alias = require("../alias");
const USER_QUERY = 'SELECT username, profileid, id FROM User';
const PROFILE_QUERY = 'SELECT id, name FROM Profile';
class UserListCommand extends command_1.default {
    constructor() {
        super('user:list');
    }
    validate(context) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("validate").call(this, context);
            // verify we have an org.  can't do anything without an org
            if (!context.org) {
                throw almError({ keyName: 'noOrgProvided', bundle: 'user_list' });
            }
            // verify that the org is a scratch org
            return context.org.checkScratchOrg(context.flags.defaultdevhubusername)
                .then(() => { this.org = context.org; });
        });
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const aliases = _.invert(yield Alias.list());
            const userInfos = yield this._buildUserInfos();
            const profileInfos = yield this._buildProfileInfos();
            let userAuthData = yield this.org.readUserAuthFiles();
            userAuthData = userAuthData.map((authData) => ({
                defaultMarker: authData.scratchAdminUsername ? '' : '(A)',
                alias: aliases[authData.username] || '',
                username: authData.username,
                profileName: profileInfos[userInfos[authData.username].ProfileId],
                orgId: this.org.authConfig.orgId,
                accessToken: authData.accessToken,
                instanceUrl: authData.instanceUrl,
                loginUrl: authData.loginUrl,
                userId: userInfos[authData.username].Id
            }));
            return Promise.resolve(userAuthData);
        });
    }
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue(messages().getMessage('usersInOrg', [this.org.authConfig.orgId], 'user_list')));
        return [
            { key: 'defaultMarker', label: '' },
            { key: 'alias', label: 'ALIAS' },
            { key: 'username', label: 'USERNAME' },
            { key: 'profileName', label: 'PROFILE NAME' },
            { key: 'userId', label: 'USER ID' }
        ];
    }
    // Build a map of { [Username]: { ProfileId, Id } } for all users in the org
    _buildUserInfos() {
        return __awaiter(this, void 0, void 0, function* () {
            const userRecords = _.get(yield this.org.force.query(this.org, USER_QUERY), 'records');
            if (userRecords) {
                return userRecords.reduce((userInfo, { Username, ProfileId, Id }) => {
                    userInfo[Username] = { ProfileId, Id };
                    return userInfo;
                }, {});
            }
        });
    }
    // Build a map of { [ProfileId]: ProfileName } for all profiles in the org
    _buildProfileInfos() {
        return __awaiter(this, void 0, void 0, function* () {
            const profileRecords = _.get(yield this.org.force.query(this.org, PROFILE_QUERY), 'records');
            if (profileRecords) {
                return profileRecords.reduce((profileInfo, { Id, Name }) => {
                    profileInfo[Id] = Name;
                    return profileInfo;
                }, {});
            }
        });
    }
}
exports.UserListCommand = UserListCommand;
exports.default = UserListCommand;

//# sourceMappingURL=userListCommand.js.map
