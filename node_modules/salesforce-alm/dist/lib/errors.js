'use strict';
const path = require('path');
const messages = require(path.join(__dirname, 'messages'))();
// @Todo Remove this file. Use almError.
// @todo remove Validation Error. It's too generic.
function InvalidProjectWorkspace() {
    this.name = 'InvalidProjectWorkspace';
    this.code = this.name;
    this.message = messages.getMessage(this.name, this.code);
    this.stack = (new Error()).stack;
}
InvalidProjectWorkspace.prototype = Object.create(Error.prototype);
InvalidProjectWorkspace.prototype.constructor = InvalidProjectWorkspace;
module.exports.InvalidProjectWorkspace = InvalidProjectWorkspace;
//----
function MissingAppConfig() {
    this.name = 'MissingAppConfig';
    this.message = messages.getMessage(this.name);
    this.code = this.name;
}
MissingAppConfig.prototype = Object.create(Error.prototype);
MissingAppConfig.prototype.constructor = MissingAppConfig;
module.exports.MissingAppConfig = MissingAppConfig;
//----
// todo rename this to MissingHubConfig.
function MissingClientConfig() {
    this.name = 'MissingClientConfig';
    this.message = messages.getMessage(this.name);
    this.code = this.name;
}
MissingClientConfig.prototype = Object.create(Error.prototype);
MissingClientConfig.prototype.constructor = MissingClientConfig;
module.exports.MissingClientConfig = MissingClientConfig;
//----
function UndefinedLocalizationLabel(locale, label) {
    this.name = 'UndefinedLocalizationLabel';
    this.message = messages.getMessage(this.name, [label, locale]);
    this.code = this.name;
}
UndefinedLocalizationLabel.prototype = Object.create(Error.prototype);
UndefinedLocalizationLabel.prototype.constructor = UndefinedLocalizationLabel;
module.exports.UndefinedLocalizedLabel = UndefinedLocalizationLabel;
//-----
function LoginServerNotFound(host, port) {
    this.name = 'LoginServerNotFound';
    this.message = messages.getMessage(this.name, [host, port]);
    this.code = this.name;
}
LoginServerNotFound.prototype = Object.create(Error.prototype);
LoginServerNotFound.prototype.constructor = LoginServerNotFound;
module.exports.LoginServerNotFound = LoginServerNotFound;
//-----
function InvalidProjectDescriptor(attributeName) {
    this.name = 'InvalidProjectDescriptor';
    this.message = messages.getMessage(this.name, [attributeName]);
    this.code = this.name;
}
InvalidProjectDescriptor.prototype = Object.create(Error.prototype);
InvalidProjectDescriptor.prototype.constructor = InvalidProjectDescriptor;
module.exports.InvalidProjectDescriptor = InvalidProjectDescriptor;
//---
function MissingScratchOrgNamespace() {
    this.name = 'MissingScratchOrgNamespace';
    this.message = messages.getMessage(this.name);
    this.code = this.name;
}
MissingScratchOrgNamespace.prototype = Object.create(Error.prototype);
MissingScratchOrgNamespace.prototype.constructor = MissingScratchOrgNamespace;
module.exports.MissingScratchOrgNamespace = MissingScratchOrgNamespace;
//---
function MissingRequiredParameter(paramName) {
    this.name = 'MissingRequiredParameter';
    this.message = messages.getMessage(this.name, [paramName]);
    this.code = this.name;
}
MissingRequiredParameter.prototype = Object.create(Error.prototype);
MissingRequiredParameter.prototype.constructor = MissingRequiredParameter;
module.exports.MissingRequiredParameter = MissingRequiredParameter;
//---
function InvalidParameter(paramName, reason) {
    this.name = 'InvalidParameter';
    this.message = messages.getMessage(this.name, [paramName, reason]);
    this.code = this.name;
}
InvalidParameter.prototype = Object.create(Error.prototype);
InvalidParameter.prototype.constructor = InvalidParameter;
module.exports.InvalidParameter = InvalidParameter;

//# sourceMappingURL=errors.js.map
