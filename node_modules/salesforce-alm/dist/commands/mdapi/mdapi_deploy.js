/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join(__dirname, '..', '..', 'lib', 'constants'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('mdDeployCommandCliDescription'),
        longDescription: messages.getMessage('mdDeployCommandCliLong'),
        help: messages.getMessage('mdDeployCommandCliHelp'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'checkonly',
                char: 'c',
                description: messages.getMessage('mdDeployCommandCliCheckOnly'),
                longDescription: messages.getMessage('mdDeployCommandCliCheckOnlyLong'),
                required: false,
                hasValue: false,
                type: 'boolean',
                xor: ['jobid'],
                default: 'false'
            },
            {
                name: 'deploydir',
                char: 'd',
                description: messages.getMessage('mdDeployCommandCliDeployDir'),
                longDescription: messages.getMessage('mdDeployCommandCliDeployDirLong'),
                required: false,
                hasValue: true,
                type: 'directory',
                xor: ['zipfile']
            },
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('mdapiCliWait', consts.DEFAULT_MDAPI_WAIT_MINUTES),
                longDescription: messages.getMessage('mdapiCliWaitLong', consts.DEFAULT_MDAPI_WAIT_MINUTES),
                required: false,
                hasValue: true,
                type: 'minutes'
            },
            {
                name: 'jobid',
                char: 'i',
                description: messages.getMessage('mdDeployCommandCliJobId'),
                longDescription: messages.getMessage('mdDeployCommandCliJobIdLong'),
                deprecated: {
                    message: messages.getMessage('mdDeployCommandCliJobIdDeprecated'),
                    version: '41.0'
                },
                required: false,
                hasValue: true,
                type: 'id'
            },
            {
                name: 'testlevel',
                char: 'l',
                description: messages.getMessage('mdDeployCommandCliTestLevel'),
                longDescription: messages.getMessage('mdDeployCommandCliTestLevelLong'),
                required: false,
                hasValue: true,
                type: 'string',
                values: ['NoTestRun', 'RunSpecifiedTests', 'RunLocalTests', 'RunAllTestsInOrg']
            },
            {
                name: 'runtests',
                char: 'r',
                description: messages.getMessage('mdDeployCommandCliRunTests'),
                longDescription: messages.getMessage('mdDeployCommandCliRunTestsLong'),
                required: false,
                hasValue: true,
                type: 'string',
                array: true
            },
            {
                name: 'rollbackonerror',
                char: 'e',
                description: messages.getMessage('mdDeployCommandCliRollbackOnError'),
                longDescription: messages.getMessage('mdDeployCommandCliRollbackOnErrorLong'),
                required: false,
                hasValue: true,
                type: 'boolean',
                default: 'true',
                deprecated: {
                    message: messages.getMessage('mdDeployCommandCliRollbackOnErrorDeprecated'),
                    version: '41.0'
                }
            },
            {
                name: 'ignoreerrors',
                char: 'o',
                description: messages.getMessage('mdDeployCommandCliIgnoreErrors'),
                longDescription: messages.getMessage('mdDeployCommandCliIgnoreErrorsLong'),
                required: false,
                hasValue: false,
                type: 'flag',
                default: 'false'
            },
            {
                name: 'ignorewarnings',
                char: 'g',
                description: messages.getMessage('mdDeployCommandCliIgnoreWarnings'),
                longDescription: messages.getMessage('mdDeployCommandCliIgnoreWarningsLong'),
                required: false,
                hasValue: false,
                type: 'flag',
                default: 'false'
            },
            // override global descriptions
            {
                name: 'verbose',
                description: messages.getMessage('mdDeployCommandCliVerbose'),
                longDescription: messages.getMessage('mdDeployCommandCliVerboseLong'),
                hidden: false
            },
            {
                name: 'zipfile',
                char: 'f',
                description: messages.getMessage('mdDeployCommandCliZipFile'),
                longDescription: messages.getMessage('mdDeployCommandCliZipFileLong'),
                required: false,
                hasValue: true,
                type: 'filepath'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const MdapiDeployCommand = require(path.join(__dirname, '..', '..', 'lib', 'mdapiDeployCommand'));
            return _execCommand(new MdapiDeployCommand(context), context);
        }
    };
};

//# sourceMappingURL=mdapi_deploy.js.map
