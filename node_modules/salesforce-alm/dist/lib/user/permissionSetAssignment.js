"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
const _ = require("lodash");
const logApi = require("../logApi");
const almError = require("../almError");
const srcDevUtil = require("../srcDevUtil");
// 
// API for working with the PermissionSetAssignment SObject.
//
// https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_objects_permissionsetassignment.htm
class PermissionSetAssignment {
    constructor(org) {
        this.org = org;
        this._fields = {};
        this.force = org.force;
        this.logger = logApi.child('PermissionSetAssignment');
    }
    get id() {
        return this._fields.id;
    }
    get isCreated() {
        return !!this.id;
    }
    get permSetName() {
        return this._permSetName;
    }
    get fields() {
        return _.clone(this._fields);
    }
    // Get a PermissionSetAssignment field
    getField(key) {
        return this._fields[key.toLowerCase()];
    }
    // Send request to create a PermissionSetAssignment sobject in the specified org.
    create(user, permSetName) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = `SELECT Id FROM PermissionSet WHERE Name='${permSetName}'`;
            const AssigneeId = this._fields.assigneeid = user.id;
            this._permSetName = permSetName;
            try {
                const queryResponse = yield this.force.query(this.org, query);
                const PermissionSetId = _.get(queryResponse, 'records[0].Id');
                if (!PermissionSetId) {
                    throw almError({ keyName: 'assignCommandPermissionSetNotFoundError' }, permSetName);
                }
                const createResponse = yield this.force.create(this.org, 'PermissionSetAssignment', { AssigneeId, PermissionSetId });
                this._fields.id = createResponse.id;
                this._fields.permissionsetid = PermissionSetId;
            }
            catch (err) {
                if (err.errorCode === 'DUPLICATE_VALUE') {
                    this.logger.info(err.message);
                }
                throw err;
            }
            return this;
        });
    }
    // Retrieves the PermissionSetAssignment object from the server and re-assigns all fields to the response
    retrieve(psaId) {
        return __awaiter(this, void 0, void 0, function* () {
            const fields = yield this.force.retrieve(this.org, 'PermissionSetAssignment', psaId);
            this._fields = srcDevUtil.toLowerCaseKeys(fields);
            return this;
        });
    }
}
exports.default = PermissionSetAssignment;

//# sourceMappingURL=permissionSetAssignment.js.map
