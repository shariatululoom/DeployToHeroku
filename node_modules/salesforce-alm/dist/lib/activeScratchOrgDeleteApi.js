/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Thirdparty
const Promise = require('bluebird');
// Local
const Org = require(path.join(__dirname, 'scratchOrgApi'));
const HubOrgApi = require(path.join(__dirname, 'hubOrgApi'));
const messagesApi = require(path.join(__dirname, 'messages'));
const almError = require(path.join(__dirname, 'almError'));
const logger = require(path.join(__dirname, 'logApi'));
const srcDevUtil = require(path.join(__dirname, 'srcDevUtil'));
/**
 * Delete the ActiveScratchOrg record.  This enqueues the scratch org for delete.
 */
const _shouldDeleteActiveScratchOrg = function (result, hubOrg, messages, data) {
    if (result.records.length !== 1) {
        const err = new Error(messages.getMessage('deleteOrgCommandQueryError', [data.orgId, result.records.length]));
        err.name = 'DeleteOrgCommandQueryError';
        return Promise.reject(err);
    }
    const activeScratchOrgId = result.records[0].Id;
    return hubOrg.force.delete(hubOrg, 'ActiveScratchOrg', activeScratchOrgId);
};
/**
 * Query for the ActiveScratchOrg associated with the scratch org.
 */
const _queryForActiveScratchOrg = function (data, hubOrg) {
    // Use the 15 char org ID for the query
    data.orgId15 = srcDevUtil.trimTo15(data.orgId);
    return hubOrg.force.query(hubOrg, `SELECT Id FROM ActiveScratchOrg WHERE ScratchOrg='${data.orgId15}'`);
};
class OrgDeleteApi {
    /**
     * Delete Org API object
     * @constructor
     */
    constructor() {
        this.hubOrg = new HubOrgApi();
        this.messages = messagesApi();
        this.logger = logger.child('OrgDeleteApi');
    }
    /**
     * Perform the delete of a scratch org.
     * @scratchOrg {object} The scratchOrg to delete
     */
    doDelete(scratchOrg, devHubUsername) {
        return scratchOrg.getConfig().then((scratchData) => {
            if (scratchData.devHubUsername) {
                this.hubOrg.setName(scratchData.devHubUsername);
            }
            const hubOrgPromise = devHubUsername ? Org.create(devHubUsername) : this.hubOrg.getConfig();
            return hubOrgPromise.then((hubData) => {
                if (scratchData.orgId !== hubData.orgId) {
                    return _queryForActiveScratchOrg(scratchData, this.hubOrg)
                        .then((result) => _shouldDeleteActiveScratchOrg(result, this.hubOrg, this.messages, scratchData))
                        .catch((err) => {
                        this.logger.info(err.message);
                        this.logger.info('The above error can be the result of deleting an expired or already deleted org.');
                        this.logger.info('attempting to cleanup the auth file');
                        throw almError('attemptingToDeleteExpiredOrDeleted');
                    });
                }
                else {
                    return Promise.reject(almError('deleteOrgHubError'));
                }
            });
        });
    }
}
module.exports = OrgDeleteApi;

//# sourceMappingURL=activeScratchOrgDeleteApi.js.map
