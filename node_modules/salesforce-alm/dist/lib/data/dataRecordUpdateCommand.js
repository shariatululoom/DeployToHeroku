"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
const TextUtils = require("../../lib/force-cli-textutils");
const DataRecordUtils = require("./dataRecordUtils");
const ID_FIELD = 'Id';
let logger;
class DataRecordUpdateCommand {
    constructor() {
        logger = logApi.child('data:record:update');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            DataRecordUtils.validateIdXorWhereFlags(context);
            const conn = yield Config.getActiveConnection(context);
            const updateObject = yield exports.createUpdateObject(conn, context);
            let result = context.flags.usetoolingapi ?
                yield conn.tooling.update(context.flags.sobjecttype, updateObject) : yield conn.sobject(context.flags.sobjecttype).update(updateObject);
            if (result.success) {
                Display.success(Messages.get('DataRecordUpdateSuccess', updateObject[ID_FIELD]));
            }
            else {
                let errors = '';
                if (result.errors) {
                    errors = '\nErrors:\n';
                    result.errors.forEach(function (err) {
                        errors += '  ' + err + '\n';
                    });
                }
                Display.failure(Messages.get('DataRecordUpdateFailure', errors));
            }
            return result;
        });
    }
}
exports.DataRecordUpdateCommand = DataRecordUpdateCommand;
exports.createUpdateObject = function (connection, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const sobjectid = yield DataRecordUtils.retrieveId(connection, context);
        const keyValuePairs = TextUtils.parseKeyValueSequence(context.flags.values);
        const updateObject = TextUtils.transformKeyValueSequence(keyValuePairs);
        updateObject[ID_FIELD] = sobjectid;
        return updateObject;
    });
};

//# sourceMappingURL=dataRecordUpdateCommand.js.map
