"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Messages = require("./force-cli-messages");
/**
 * Takes a sequence of key=value string pairs and produces an object out of them.
 * If you repeat the key, it replaces the value with the subsequent value.
 *
 * @param [keyValuePairs] - The list of key=value pair strings.
 */
function transformKeyValueSequence(keyValuePairs) {
    const constructedObject = {};
    keyValuePairs.forEach((pair) => {
        // Look for the *first* '=' and splits there, ignores any subsequent '=' for this pair
        const eqPosition = pair.indexOf('=');
        if (eqPosition === -1) {
            throw new Error(Messages.get('TextUtilMalformedKeyValuePair', pair));
        }
        else {
            const key = pair.substr(0, eqPosition);
            const value = pair.substr(eqPosition + 1);
            constructedObject[key] = value;
        }
    });
    return constructedObject;
}
exports.transformKeyValueSequence = transformKeyValueSequence;
/**
 * Splits a sequence of 'key=value key="leftValue rightValue"   key=value'
 * into a list of key=value pairs, paying attention to quoted whitespace.
 *
 * This is NOT a full push down-automaton so do NOT expect full error handling/recovery.
 *
 * @param {string} text - The sequence to split
 */
function parseKeyValueSequence(text) {
    const separator = /\s/;
    let inSingleQuote = false, inDoubleQuote = false;
    let currentToken = [];
    let keyValuePairs = [];
    let trimmedText = text.trim();
    for (let i = 0; i < trimmedText.length; i++) {
        const currentChar = trimmedText[i];
        const isSeparator = currentChar.match(separator);
        if (currentChar === "'" && !inDoubleQuote) {
            inSingleQuote = !inSingleQuote;
            continue;
        }
        else if (currentChar === '"' && !inSingleQuote) {
            inDoubleQuote = !inDoubleQuote;
            continue;
        }
        if (!inSingleQuote && !inDoubleQuote && isSeparator) {
            if (currentToken.length > 0) {
                keyValuePairs.push(currentToken.join(''));
                currentToken = [];
            }
        }
        else {
            currentToken.push(currentChar);
        }
    }
    // For the case of only one key=value pair with no separator
    if (currentToken.length > 0) {
        keyValuePairs.push(currentToken.join(''));
    }
    return keyValuePairs;
}
exports.parseKeyValueSequence = parseKeyValueSequence;

//# sourceMappingURL=force-cli-textutils.js.map
