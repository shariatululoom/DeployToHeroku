/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', 'messages'))();
const request = require('request');
const PackageInstallCommand = require(path.join(__dirname, '..', 'package', 'packageInstallCommand'));
const packageInstallCommand = new PackageInstallCommand();
class LightningTestInstallCommand {
    validate(context) {
        if (context.flags.wait && isNaN(context.flags.wait)) {
            throw new Error(messages.getMessage('waitNotNumber', [context.flags.wait], 'lightning_test'));
        }
        this.org = context.org;
        const options = context.flags;
        return Promise.resolve(options);
    }
    execute(context) {
        const org = this.org;
        const releaseVersion = context.releaseversion ?
            `tags/${context.releaseversion}` : 'latest';
        const uri = `https://api.github.com/repos/forcedotcom/LightningTestingService/releases/${releaseVersion}`;
        return new Promise((resolve, reject) => {
            request({
                headers: {
                    'User-Agent': 'LTS'
                },
                uri
            }, (err, res, body) => {
                if (err) {
                    return reject(new Error(err));
                }
                const content = JSON.parse(body);
                if (content.message === 'Not Found') {
                    return reject(new Error(messages.getMessage('invalidVersion', [context.releaseversion], 'lightning_test')));
                }
                const releaseMsg = content.body;
                const ids = [];
                let idx = 0;
                for (let i = 0; i < 3; i++) {
                    idx = releaseMsg.indexOf('p0=', ++idx);
                    ids[i] = releaseMsg.substring(idx + 3, idx + 18);
                }
                let id = '';
                const packagetype = context.packagetype ? context.packagetype.toLowerCase() : 'full';
                if (packagetype === 'jasmine') {
                    id = ids[0];
                }
                else if (packagetype === 'mocha') {
                    id = ids[1];
                }
                else if (packagetype === 'full') {
                    id = ids[2];
                }
                else {
                    return reject(new Error(messages.getMessage('invalidType', [packagetype], 'lightning_test')));
                }
                const ctx = {
                    org,
                    flags: {
                        id,
                        wait: context.wait ? context.wait : 2
                    }
                };
                return resolve(packageInstallCommand.execute(ctx));
            });
        });
    }
    /**
     * returns a human readable message for a cli output
     * @returns {string}
     */
    getHumanSuccessMessage(result) {
        return packageInstallCommand.getHumanSuccessMessage(result);
    }
}
module.exports = LightningTestInstallCommand;

//# sourceMappingURL=lightningTestInstallCommand.js.map
