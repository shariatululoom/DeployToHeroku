"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
const _ = require("lodash");
const almError = require("../almError");
const command_1 = require("../command");
const Alias = require("../alias");
class UserDisplayCommand extends command_1.default {
    constructor() {
        super('user:display');
    }
    validate(context) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            _super("validate").call(this, context);
            // verify we have an org.  can't do anything without an org
            if (!context.org) {
                throw almError({ keyName: 'noOrgProvided', bundle: 'user_display' });
            }
            // verify that the org is a scratch org
            return context.org.checkScratchOrg(context.flags.defaultdevhubusername)
                .then(() => { this.org = context.org; });
        });
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const username = this.org.getName();
            const userAuthData = yield this.org.getConfig();
            const profileNameQuery = `SELECT name FROM Profile WHERE Id IN (SELECT profileid FROM User WHERE username='${username}')`;
            const userQuery = `SELECT id FROM User WHERE username='${username}'`;
            let profileName = userAuthData.userProfileName;
            let userId = userAuthData.userId;
            try {
                // the user executing this command may not have access to the Profile sObject.
                if (!profileName) {
                    profileName = _.get(yield this.org.force.query(this.org, profileNameQuery), 'records[0].Name');
                }
            }
            catch (err) {
                profileName = 'unknown';
                this.logger.debug(`Query for the profile name failed for username: ${username} with message: ${_.get(err, 'message')}`);
            }
            try {
                if (!userId) {
                    userId = _.get(yield this.org.force.query(this.org, userQuery), 'records[0].Id');
                }
            }
            catch (err) {
                userId = 'unknown';
                this.logger.debug(`Query for the user ID failed for username: ${username} with message: ${_.get(err, 'message')}`);
            }
            const userData = {
                username,
                profileName,
                id: userId,
                orgId: this.org.authConfig.orgId,
                accessToken: userAuthData.accessToken,
                instanceUrl: userAuthData.instanceUrl,
                loginUrl: userAuthData.loginUrl
            };
            const alias = yield Alias.byValue(username);
            if (alias) {
                userData['alias'] = alias;
            }
            if (userAuthData.password) {
                userData['password'] = userAuthData.password;
            }
            return Promise.resolve(userData);
        });
    }
    getHumanSuccessMessage(userData) {
        this.logger.styledHeader(this.logger.color.blue('User Description'));
        const columnData = {
            columns: [
                { key: 'key', label: 'Key' },
                { key: 'value', label: 'Value' }
            ]
        };
        const userDisplayData = _.chain(userData)
            .map((value, k) => {
            const key = _.map(_.kebabCase(k).split('-'), _.capitalize).join(' ');
            return { key, value };
        })
            .sortBy('key')
            .value();
        this.logger.table(userDisplayData, columnData);
    }
}
exports.UserDisplayCommand = UserDisplayCommand;
exports.default = UserDisplayCommand;

//# sourceMappingURL=userDisplayCommand.js.map
