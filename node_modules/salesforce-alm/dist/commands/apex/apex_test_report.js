/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join('..', '..', 'lib', 'constants'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('apexReportCommandDescription', [], 'apex'),
        longDescription: messages.getMessage('apexReportCommandDescriptionLong', [], 'apex'),
        help: messages.getMessage('apexReportCommandHelp', [], 'apex'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'testrunid',
                char: 'i',
                description: messages.getMessage('apexReportCommandParamTestRunId', [], 'apex'),
                longDescription: messages.getMessage('apexReportCommandParamTestRunIdLong', [], 'apex'),
                required: true,
                hasValue: true,
                type: 'id'
            }, {
                name: 'codecoverage',
                char: 'c',
                description: messages.getMessage('apexCommandParamCodeCoverage', [], 'apex'),
                longDescription: messages.getMessage('apexCommandParamCodeCoverageLong', [], 'apex'),
                hasValue: false,
                required: false,
                type: 'flag'
            }, {
                name: 'outputdir',
                char: 'd',
                description: messages.getMessage('apexCommandParamTestArtifactDir', [], 'apex'),
                longDescription: messages.getMessage('apexCommandParamTestArtifactDirLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'directory'
            }, {
                name: 'resultformat',
                char: 'r',
                description: messages.getMessage('apexReportCommandParamReporter', [], 'apex'),
                longDescription: messages.getMessage('apexReportCommandParamReporterLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'string',
                values: ['human', 'tap', 'junit', 'json'],
                default: 'human'
            }, {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('streamingWait', []),
                longDescription: messages.getMessage('streamingWaitLong', []),
                hasValue: true,
                required: false,
                type: 'minutes',
                min: consts.MIN_STREAM_TIMEOUT_MINUTES,
                default: consts.DEFAULT_STREAM_TIMEOUT_MINUTES
            }, {
                name: 'verbose',
                description: messages.getMessage('verboseDescription', [], 'apex'),
                longDescription: messages.getMessage('verboseLongDescription', [], 'apex'),
                hidden: false
            }],
        run(context) {
            const Command = require(path.join('..', '..', 'lib', 'apex', 'apexReportCommand'));
            return _execCommand(new Command(), context);
        }
    };
};

//# sourceMappingURL=apex_test_report.js.map
