"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Config = require("../../lib/force-cli-config");
const Display = require("../../lib/force-cli-display");
const logApi = require("../logApi");
const util = require("util");
let logger;
class ApexLogGetCommand {
    constructor() {
        logger = logApi.child('apex:log:get');
    }
    validate(context) {
    }
    execute(context, doneCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield exports.getLogById(context);
        });
    }
}
exports.ApexLogGetCommand = ApexLogGetCommand;
/**
 * fetch body of specific debug log
 * exposed for unit testing (mocked)
 * @param logId {string} logId - the debug log to retrieve
 */
exports.getLogById = function (context) {
    return __awaiter(this, void 0, void 0, function* () {
        let conn = yield Config.getActiveConnection(context);
        let geturl = util.format('%s/services/data/v%s/tooling/sobjects/ApexLog/%s/Body', conn.instanceUrl, conn.version, context.flags.logid);
        let log = '';
        // We don't care about the callback because requestGet also returns a promise
        const response = yield conn.requestGet(geturl, () => { });
        Display.info(response.toString());
        log = response.toString();
        return { log };
    });
};

//# sourceMappingURL=apexLogGetCommand.js.map
