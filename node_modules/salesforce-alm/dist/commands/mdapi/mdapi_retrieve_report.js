/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join(__dirname, '..', '..', 'lib', 'constants'));
const Stash = require(path.join(__dirname, '..', '..', 'lib', 'stash'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('mdRetrieveReportCommandCliDescription'),
        longDescription: messages.getMessage('mdRetrieveReportCommandCliLong'),
        help: messages.getMessage('mdRetrieveReportCommandCliHelp'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('mdRetrieveCommandCliWait', consts.DEFAULT_MDAPI_RETRIEVE_WAIT_MINUTES),
                longDescription: messages.getMessage('mdRetrieveCommandCliWaitLong', consts.DEFAULT_MDAPI_RETRIEVE_WAIT_MINUTES),
                required: false,
                hasValue: true,
                type: 'minutes'
            },
            {
                name: 'retrievetargetdir',
                char: 'r',
                description: messages.getMessage('mdRetrieveCommandCliRetrieveTargetDir'),
                longDescription: messages.getMessage('mdRetrieveCommandCliRetrieveTargetDirLong'),
                required: false,
                hasValue: true,
                type: 'directory'
            },
            {
                name: 'verbose',
                description: messages.getMessage('mdRetrieveCommandCliVerbose'),
                longDescription: messages.getMessage('mdRetrieveCommandCliVerboseLong'),
                hidden: false
            },
            {
                name: 'jobid',
                char: 'i',
                description: messages.getMessage('mdRetrieveCommandCliJobId'),
                longDescription: messages.getMessage('mdRetrieveCommandCliJobIdLong'),
                required: false,
                hasValue: true,
                type: 'id'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const MdapiRetrieveReportCommand = require(path.join(__dirname, '..', '..', 'lib', 'mdapiRetrieveReportCommand'));
            return _execCommand(new MdapiRetrieveReportCommand(context), context);
        },
        resolveUsername(context) {
            return context.flags.jobid ? undefined : Stash.get('targetusername', Stash.Commands.MDAPI_RETRIEVE);
        }
    };
};

//# sourceMappingURL=mdapi_retrieve_report.js.map
