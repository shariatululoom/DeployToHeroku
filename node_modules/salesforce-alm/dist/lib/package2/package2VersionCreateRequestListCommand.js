/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
const util = require('util');
// Local
const messages = require(path.join(__dirname, '..', 'messages'))();
const Package2VersionCreateRequestApi = require(path.join(__dirname, 'package2VersionCreateRequestApi'));
const logger = require(path.join(__dirname, '..', 'logApi'));
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
class Package2VersionCreateRequestListCommand {
    constructor() {
        this.logger = logger.child('package2:version:create:list');
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.package2VersionCreateRequestApi = new Package2VersionCreateRequestApi(context.org.force, context.org);
        return this.package2VersionCreateRequestApi.list(context.flags)
            .then((results) => {
            this.cnt = util.isArray(results) ? results.length : 0;
            return results;
        });
    }
    /**
     * indicates that the human readable message should be tabular
     * @returns {[{}...]}
     */
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue(`Package2 Version Create Requests  [${this.cnt || 0}]`));
        const columnData = [
            { key: 'Id', label: 'Id' },
            { key: 'Status', label: messages.getMessage('status', [], 'package2_version_create_list') },
            {
                key: 'Package2Id',
                label: messages.getMessage('package2Id', [], 'package2_version_create_list')
            },
            {
                key: 'Package2VersionId',
                label: messages.getMessage('package2VersionId', [], 'package2_version_create_list')
            },
            {
                key: 'SubscriberPackageVersionId',
                label: messages.getMessage('subscriberPackageVersionId', [], 'package2_version_create_list')
            },
            { key: 'Tag', label: messages.getMessage('tag', [], 'package2_version_create_list') },
            { key: 'Branch', label: messages.getMessage('branch', [], 'package2_version_create_list') },
            { key: 'CreatedDate', label: 'Created Date' }
        ];
        return columnData;
    }
}
module.exports = Package2VersionCreateRequestListCommand;

//# sourceMappingURL=package2VersionCreateRequestListCommand.js.map
