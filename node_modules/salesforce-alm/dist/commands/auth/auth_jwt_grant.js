/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
// Node
const path = require('path');
// Local
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('description', [], 'auth_jwt'),
        longDescription: messages.getMessage('longDescription', [], 'auth_jwt'),
        help: messages.getMessage('help', [], 'auth_jwt'),
        requiresProject: false,
        flags: [{
                name: 'username',
                char: 'u',
                description: messages.getMessage('username', [], 'auth_jwt'),
                longDescription: messages.getMessage('usernameLong', [], 'auth_jwt'),
                hasValue: true,
                required: true,
                type: 'string'
            },
            {
                name: 'jwtkeyfile',
                char: 'f',
                description: messages.getMessage('key', [], 'auth_jwt'),
                longDescription: messages.getMessage('keyLong', [], 'auth_jwt'),
                hasValue: true,
                required: true,
                type: 'filepath'
            },
            {
                name: 'clientid',
                char: 'i',
                description: messages.getMessage('clientId', [], 'auth'),
                longDescription: messages.getMessage('clientIdLong', [], 'auth'),
                hasValue: true,
                required: true,
                type: 'string'
            },
            {
                name: 'instanceurl',
                char: 'r',
                description: messages.getMessage('instanceUrl', [], 'auth'),
                longDescription: messages.getMessage('instanceUrlLong', [], 'auth'),
                hasValue: true,
                type: 'url'
            },
            {
                name: 'setdefaultdevhubusername',
                char: 'd',
                description: messages.getMessage('setDefaultDevHub', [], 'auth'),
                longDescription: messages.getMessage('setDefaultDevHubLong', [], 'auth'),
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'setdefaultusername',
                char: 's',
                description: messages.getMessage('setDefaultUsername', [], 'auth'),
                longDescription: messages.getMessage('setDefaultUsernameLong', [], 'auth'),
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'setalias',
                char: 'a',
                description: messages.getMessage('setAlias', [], 'auth'),
                longDescription: messages.getMessage('setAliasLong', [], 'auth'),
                hasValue: true,
                type: 'string'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {*  }
         */
        run(context) {
            const AuthCommand = require(path.join(__dirname, '..', '..', 'lib', 'authCommand'));
            const authCommand = new AuthCommand();
            return _execCommand(authCommand, context);
        }
    };
};

//# sourceMappingURL=auth_jwt_grant.js.map
