/*
 * Copyright, 1999-2016, salesforce.com
 * All Rights Reserved
 * Company Confidential
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join('..', '..', 'lib', 'constants'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('pushCommandCliDescription'),
        longDescription: messages.getMessage('pushCommandCliDescriptionLong'),
        help: messages.getMessage('pushCommandCliHelp'),
        showProgress: true,
        supportsTargetUsername: true,
        flags: [
            {
                name: 'forceoverwrite',
                char: 'f',
                description: messages.getMessage('pushCommandForceOption'),
                longDescription: messages.getMessage('pushCommandForceOptionLong'),
                required: false,
                type: 'flag'
            },
            {
                name: 'ignorewarnings',
                char: 'g',
                description: messages.getMessage('ignoreWarningsParamDescription', null, 'source_push'),
                longDescription: messages.getMessage('ignoreWarningsParamLongDescription', null, 'source_push'),
                required: false,
                type: 'flag'
            },
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('mdapiCliWait', consts.DEFAULT_SRC_WAIT_MINUTES),
                longDescription: messages.getMessage('pushCommandWaitOptionDescriptionLong'),
                required: false,
                hasValue: true,
                type: 'minutes',
                default: consts.DEFAULT_SRC_WAIT_MINUTES,
                min: consts.MIN_SRC_WAIT_MINUTES
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const MdapiPushCommand = require(path.join(__dirname, '..', '..', 'lib', 'mdapiPushCommand'));
            return _execCommand(new MdapiPushCommand(), context);
        }
    };
};

//# sourceMappingURL=source_push.js.map
