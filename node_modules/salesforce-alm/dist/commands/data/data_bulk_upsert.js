"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Messages = require("../../lib/force-cli-messages");
module.exports = function (_execCommand) {
    return {
        command: 'data:bulk:upsert',
        description: Messages.get('DataBulkUpsertDescription'),
        longDescription: Messages.get('DataBulkUpsertLongDescription'),
        help: Messages.get('DataBulkUpsertHelp'),
        requiresProject: false,
        args: [],
        flags: [{
                name: 'sobjecttype',
                char: 's',
                hasValue: true,
                required: true,
                hidden: false,
                type: 'string',
                description: Messages.get('DataBulkUpsertSobjectTypeDescription'),
                longDescription: Messages.get('DataBulkUpsertSobjectTypeLongDescription')
            }, {
                name: 'csvfile',
                char: 'f',
                hasValue: true,
                required: true,
                hidden: false,
                type: 'file',
                description: Messages.get('DataBulkUpsertCsvFilePathDescription'),
                longDescription: Messages.get('DataBulkUpsertCsvFilePathLongDescription')
            }, {
                name: 'externalid',
                char: 'i',
                hasValue: true,
                required: true,
                hidden: false,
                type: 'id',
                description: Messages.get('DataBulkUpsertExternalIdDescription'),
                longDescription: Messages.get('DataBulkUpsertExternalIdLongDescription')
            }, {
                name: 'wait',
                char: 'w',
                hasValue: true,
                required: false,
                hidden: false,
                type: 'minutes',
                description: Messages.get('DataBulkUpsertWaitDescription'),
                longDescription: Messages.get('DataBulkUpsertWaitLongDescription')
            }],
        supportsTargetUsername: true,
        run(context) {
            return __awaiter(this, void 0, void 0, function* () {
                const DataBulkUpsertCommand = require('../../lib/data/dataBulkUpsertCommand').DataBulkUpsertCommand;
                return yield _execCommand(new DataBulkUpsertCommand(), context);
            });
        }
    };
};

//# sourceMappingURL=data_bulk_upsert.js.map
