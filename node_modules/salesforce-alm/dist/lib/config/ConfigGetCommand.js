/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Thirdparty
const Promise = require('bluebird');
// Local
const almError = require(path.join(__dirname, '..', 'almError'));
const logger = require(path.join(__dirname, '..', 'logApi'));
const messages = require(path.join(__dirname, '..', 'messages'))();
const SfdxConfigAggregator = require(path.join(__dirname, 'SfdxConfigAggregator'));
class GetCommand {
    constructor() {
        this.logger = logger.child('config:get');
    }
    validate(context) {
        if (context.args.length === 0) {
            throw almError({ keyName: 'NoConfigKeysFound', bundle: 'configGetCommand' }, []);
        }
        return Promise.resolve(context);
    }
    execute(context) {
        if (context.args.length === 0) {
            throw almError({ keyName: 'NoConfigKeysFound', bundle: 'configGetCommand' }, []);
        }
        this.flags = context.flags;
        const results = [];
        const aggregator = new SfdxConfigAggregator();
        return aggregator.initialize().then(() => {
            context.args.forEach(configName => {
                results.push(aggregator.getInfo(configName));
            });
            return Promise.resolve(results);
        });
    }
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue('Config'));
        const columns = [
            { key: 'key', label: messages.getMessage('key', [], 'configListCommand') },
            { key: 'value', label: messages.getMessage('value', [], 'configListCommand') }
        ];
        if (this.flags.verbose) {
            columns.push({ key: 'location', label: messages.getMessage('location', [], 'configListCommand') });
        }
        return columns;
    }
}
module.exports = GetCommand;

//# sourceMappingURL=ConfigGetCommand.js.map
