/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
/**
 * Command that provides data export capability.
 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('dataExportCommandCliDescription', [], 'data'),
        longDescription: messages.getMessage('dataExportCommandCliDescriptionLong', [], 'data'),
        help: messages.getMessage('dataExportCommandCliHelp', [], 'data'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'query',
                char: 'q',
                description: messages.getMessage('dataExportCommandCliSoql', [], 'data'),
                longDescription: messages.getMessage('dataExportCommandCliSoqlLong', [], 'data'),
                hasValue: true,
                required: true,
                type: 'string'
            },
            {
                name: 'plan',
                char: 'p',
                description: messages.getMessage('dataExportCommandCliPlan', [], 'data'),
                longDescription: messages.getMessage('dataExportCommandCliPlanLong', [], 'data'),
                hasValue: false,
                required: false,
                type: 'flag'
            },
            {
                name: 'prefix',
                char: 'x',
                description: messages.getMessage('dataExportCommandCliPrefix', [], 'data'),
                longDescription: messages.getMessage('dataExportCommandCliPrefixLong', [], 'data'),
                hasValue: true,
                required: false,
                type: 'string'
            },
            {
                name: 'outputdir',
                char: 'd',
                description: messages.getMessage('dataExportCommandCliDir', [], 'data'),
                longDescription: messages.getMessage('dataExportCommandCliDirLong', [], 'data'),
                hasValue: true,
                required: false,
                type: 'directory'
            }
        ],
        run(context) {
            const DataExportCommand = require(path.join(__dirname, '..', '..', 'lib', 'data', 'dataExportCommand'));
            return _execCommand(new DataExportCommand(), context);
        }
    };
};

//# sourceMappingURL=data_tree_export.js.map
