"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const lodash_1 = require("lodash");
const logApi = require("../logApi");
// endpoint registry
exports.APPHUB_ENDPOINTS = {
    discover: 'discover',
    envAcccess: 'environmentAccesses'
};
const LOGGER = logApi.child('AppHub');
// app config for installed apphub
class AppHubInfo {
    constructor(appHubAppConfig = { versions: [] }) {
        this.appHubAppConfig = appHubAppConfig;
    }
    getConfig() {
        return this.appHubAppConfig;
    }
    getVersions() {
        return this.appHubAppConfig.versions;
    }
}
exports.AppHubInfo = AppHubInfo;
/**
 * No operation AppHub API.  DevHub does not have AppHub installed.
 */
class BaseAppHubApiImpl {
    constructor(appHubOrg, appHubAppConfig = { versions: [] }) {
        this.appHubOrg = appHubOrg;
        this.throwErrors = false;
        this.appHubInfo = new AppHubInfo(appHubAppConfig);
        // do this once
        this.username = os.userInfo().username;
        this.hostname = os.hostname();
    }
    getAppInfo() {
        return this.appHubInfo;
    }
    postScratchOrgCreate(scratchOrgInfoResponse, scratchOrg) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented!');
        });
    }
    getLatestVersionEndpoint(endpoint) {
        const versions = this.appHubInfo.getVersions();
        const endpointVersions = versions[endpoint];
        if (!endpointVersions || endpointVersions.length == 0) {
            throw new Error(`Endpoint versions not found for ${endpoint}`);
        }
        return `${endpoint}/${endpointVersions[0]}`;
    }
    doThrowErrors() {
        this.throwErrors = true;
    }
}
/**
 * No operation AppHub API.  Org may not be a DevHub or AppHub is not installed.
 */
class NoOpAppHubApiImpl extends BaseAppHubApiImpl {
    constructor() {
        super(undefined);
    }
    postScratchOrgCreate(scratchOrgInfoResponse, scratchOrg) {
        return __awaiter(this, void 0, void 0, function* () {
            // apphub not installed or general no-op
        });
    }
}
exports.NoOpAppHubApiImpl = NoOpAppHubApiImpl;
exports.NOOP = new NoOpAppHubApiImpl();
/**
 * Handles AppHub API interactions.
 */
class AppHubApiImpl extends BaseAppHubApiImpl {
    // handle new scratch orgs
    postScratchOrgCreate(scratchOrgInfoResponse, scratchOrg) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: get impl based on latest supported endpoint version
            let endpoint;
            // set scratch org values to env record values
            const scratchOrgConfig = yield scratchOrg.getConfig();
            const envAccess = {
                AccessToken__c: scratchOrgConfig.accessToken,
                AuthCode__c: scratchOrgInfoResponse.AuthCode,
                ConnectedAppCallbackUrl__c: scratchOrgInfoResponse.ConnectedAppCallbackUrl,
                ConnectedAppClientSecret__c: scratchOrgConfig.clientSecret,
                ConnectedAppConsumerKey__c: scratchOrgInfoResponse.ConnectedAppConsumerKey,
                InstanceUrl__c: scratchOrgConfig.instanceUrl,
                InstanceName__c: scratchOrgInfoResponse.SignupInstance,
                IsAuthCodeExpired__c: true,
                OrgId__c: scratchOrgInfoResponse.ScratchOrg,
                RefreshToken__c: scratchOrgConfig.refreshToken,
                Username__c: scratchOrgInfoResponse.SignupUsername,
                ClientUsername__c: this.username,
                ClientHostname__c: this.hostname
            };
            // send access to apphub
            try {
                endpoint = this.getLatestVersionEndpoint(exports.APPHUB_ENDPOINTS.envAcccess);
                const response = yield this.appHubOrg.force.apexRestPost(this.appHubOrg, endpoint, [envAccess]);
                LOGGER.debug(`Saved accesses: ${response}`);
                return response;
            }
            catch (err) {
                LOGGER.warn(`Unable to send accesses to AppHub (${endpoint}, ${envAccess.OrgId__c}): ${err.message}`);
                if (this.throwErrors) {
                    throw err;
                }
                return [];
            }
        });
    }
}
/**
 * Creates AppHub API instance for given Org.
 *
 * No-op API is returned if:
 *   - Org is NOT a DevHub (determined via local config),
 *   - AppHub is not installed,
 *   - AppHub CLI integration is disabled via SFDX_DISABLE_APP_HUB,
 *   - Error occurs
 *
 * @param hubOrg
 * @returns {Promise<AppHubApi>}
 */
function getAppHub(hubOrg) {
    return __awaiter(this, void 0, void 0, function* () {
        // env var to disable AppHub interactions
        const disable = process.env.SFDX_DISABLE_APP_HUB;
        const isDisabled = !lodash_1._.isNil(disable) && disable.toLowerCase() === 'true';
        // must be enabled
        if (isDisabled || !hubOrg) {
            return exports.NOOP;
        }
        // must be DevHub
        const isDevHubOrg = yield hubOrg.isDevHubOrg();
        if (!isDevHubOrg) {
            return exports.NOOP;
        }
        // AppHub must be installed
        try {
            // TODO: set timeout to min
            const response = yield hubOrg.force.apexRestGet(hubOrg, exports.APPHUB_ENDPOINTS.discover);
            if (!response) {
                throw new Error(`AppHub /${exports.APPHUB_ENDPOINTS.discover} endpoint not found`);
            }
            // extract AppHub app config from response
            const swagger = lodash_1._.isString(response) ? JSON.parse(response) : response;
            const appHubAppConfig = swagger['x-apphub'];
            if (!appHubAppConfig) {
                throw new Error('AppHub config not found');
            }
            LOGGER.debug('AppHub integration enabled');
            return new AppHubApiImpl(hubOrg, appHubAppConfig);
        }
        catch (err) {
            LOGGER.warn(`Unable to discover AppHub: ${err.message}`);
            // use no-op api
            return exports.NOOP;
        }
    });
}
exports.getAppHub = getAppHub;

//# sourceMappingURL=appHubApi.js.map
