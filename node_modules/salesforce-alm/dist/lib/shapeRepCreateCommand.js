/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const varargsCommand_1 = require("./varargsCommand");
const path = require('path');
const ShapeRepApi = require(path.join(__dirname, 'shapeRepApi'));
const messages = require(path.join(__dirname, 'messages'))();
class ShapeRepCreateCommand extends varargsCommand_1.default {
    constructor() {
        super('orgshape:create');
    }
    /**
     * secondary validation from the cli interface. this is a protocol style function intended to be represented by other
     * commands
     * @param context - this cli context
     * @returns {Promise}
     */
    validate(context) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            // validate varargs
            yield _super("validate").call(this, context);
            // Make sure the Org has the ShapePilotPref enabled
            this.shapeApi = new ShapeRepApi(context.org.force, context.org);
            const enabled = yield this.shapeApi.isFeatureEnabled();
            if (!enabled) {
                return Promise.reject(new Error(messages.getMessage('create_shape_command_no_access', null, 'org_shape')));
            }
        });
    }
    execute(context, stdinValues) {
        return __awaiter(this, void 0, void 0, function* () {
            // Finally, create the org shape and record the response
            const response = yield this.shapeApi.create();
            return response;
        });
    }
    getHumanSuccessMessage(shape) {
        return messages.getMessage('create_shape_command_success', shape.id, 'org_shape');
    }
}
module.exports = ShapeRepCreateCommand;

//# sourceMappingURL=shapeRepCreateCommand.js.map
