/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Local
const messages = require(path.join(__dirname, '..', 'messages'))();
const logger = require(path.join(__dirname, '..', 'logApi'));
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
const Package2VersionCreateRequestApi = require(path.join(__dirname, 'package2VersionCreateRequestApi'));
class Package2VersionCreateRequestGetCommand {
    constructor() {
        this.logger = logger.child('package2:version:create:get');
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        pkg2Utils.validateId(pkg2Utils.BY_LABEL.PACKAGE2_VERSION_CREATE_REQUEST_ID, context.flags.package2createrequestid);
        this.package2VersionCreateRequestApi = new Package2VersionCreateRequestApi(context.org.force, context.org);
        return this.package2VersionCreateRequestApi.byId(context.flags.package2createrequestid)
            .then((records) => {
            if (context.flags.json) {
                return records;
            }
            else if (records && records.length > 0) {
                const record = records[0];
                const data = [
                    { key: messages.getMessage('id', [], 'package2_version_create_list'), value: record.Id },
                    { key: messages.getMessage('status', [], 'package2_version_create_list'), value: record.Status },
                    { key: messages.getMessage('package2Id', [], 'package2_version_create_list'), value: record.Package2Id },
                    { key: messages.getMessage('package2VersionId', [], 'package2_version_create_list'), value: record.Package2VersionId },
                    { key: messages.getMessage('subscriberPackageVersionId', [], 'package2_version_create_list'),
                        value: record.SubscriberPackageVersionId },
                    { key: messages.getMessage('tag', [], 'package2_version_create_list'), value: record.Tag },
                    { key: messages.getMessage('branch', [], 'package2_version_create_list'), value: record.Branch },
                    { key: 'Created Date', value: record.CreatedDate }
                ];
                this.logger.styledHeader(this.logger.color.blue('Package2 Version Create Request'));
                this.logger.table(data, { columns: [
                        { key: 'key', label: 'Name' },
                        { key: 'value', label: 'Value' }
                    ] });
                if (record.Error && record.Error.length > 0) {
                    const errors = [];
                    record.Error.forEach((error) => {
                        errors.push(`(${errors.length + 1}) ${error}`);
                    });
                    this.logger.styledHeader(this.logger.color.red('Errors'));
                    this.logger.log(errors.join('\n'));
                }
            }
            return null;
        });
    }
}
module.exports = Package2VersionCreateRequestGetCommand;

//# sourceMappingURL=package2VersionCreateRequestGetCommand.js.map
