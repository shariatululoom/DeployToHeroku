/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
module.exports = function (_execCommand) {
    const path = require('path');
    const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
    return {
        description: messages.getMessage('description', [], 'org_shape_delete'),
        longDescription: messages.getMessage('longDescription', [], 'org_shape_delete'),
        help: messages.getMessage('help', [], 'org_shape_delete'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [
            // override default 'targetusername' attributes (name enables param object merge)
            {
                name: messages.targetusername,
                description: messages.getMessage('usernameOption', [], 'org_shape_delete'),
                longDescription: messages.getMessage('usernameOptionLong', [], 'org_shape_delete'),
                required: true
            },
            {
                name: 'noprompt',
                char: 'p',
                description: messages.getMessage('noPrompt', [], 'org_shape_delete'),
                longDescription: messages.getMessage('noPromptLong', [], 'org_shape_delete'),
                hasValue: false,
                required: false,
                type: 'flag'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {*  }
         */
        run(context) {
            const heroku = require('heroku-cli-util');
            const OrgShapeDeleteCommand = require(path.join(__dirname, '..', '..', 'lib', 'orgShapeDeleteCommand'));
            const orgShapeDeleteCommand = new OrgShapeDeleteCommand();
            // don't prompt yes/no if we're forcing the delete request, just execute
            if (context.flags.noprompt) {
                return _execCommand(orgShapeDeleteCommand, context);
            }
            else {
                return heroku.prompt(messages.getMessage('deleteCommandYesNo', context.flags.targetusername, 'org_shape_delete'))
                    .then((answer) => {
                    if (answer.toUpperCase() === 'YES' || answer.toUpperCase() === 'Y') {
                        return _execCommand(orgShapeDeleteCommand, context);
                    }
                    return undefined;
                });
            }
        }
    };
};

//# sourceMappingURL=org_shape_delete.js.map
