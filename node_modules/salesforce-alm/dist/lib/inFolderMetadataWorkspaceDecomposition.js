/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require('path');
const MetadataRegistry = require(path.join(__dirname, 'metadataRegistry'));
class InFolderMetadataWorkspaceDecomposition {
    constructor(decompositionConfig) {
        this.decompositionConfig = decompositionConfig;
    }
    getDecomposedFileName(annotation, decomposedSubtypeConfig) {
        return null;
    }
    getContainerPath(metadataFilePath, ext) {
        return metadataFilePath;
    }
    findDecomposedPaths(metadataFilePath, ext) {
        return new Map();
    }
    getDecomposedSubtypeDirFromMetadataFile(metadataFilePath, ext, decomposedSubtypeConfig) {
        return null;
    }
    getNondecomposedFilePath(decomposedPath, typeDef) {
        const fileNameWithoutMetadataExt = path.basename(decomposedPath, MetadataRegistry.getMetadataFileExt());
        const fileName = path.basename(fileNameWithoutMetadataExt, path.extname(fileNameWithoutMetadataExt));
        return path.join(path.dirname(decomposedPath), `${fileName}.${typeDef.ext}${MetadataRegistry.getMetadataFileExt()}`);
    }
}
exports.InFolderMetadataWorkspaceDecomposition = InFolderMetadataWorkspaceDecomposition;

//# sourceMappingURL=inFolderMetadataWorkspaceDecomposition.js.map
