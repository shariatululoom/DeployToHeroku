/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join(__dirname, '..', '..', 'lib', 'constants'));
const Stash = require(path.join(__dirname, '..', '..', 'lib', 'stash'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('mdDeployReportCommandCliDescription'),
        longDescription: messages.getMessage('mdDeployReportCommandCliLong'),
        help: messages.getMessage('mdDeployReportCommandCliHelp'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('mdapiCliWait', consts.DEFAULT_MDAPI_WAIT_MINUTES),
                longDescription: messages.getMessage('mdapiCliWaitLong', consts.DEFAULT_MDAPI_WAIT_MINUTES),
                required: false,
                hasValue: true,
                type: 'minutes'
            },
            {
                name: 'jobid',
                char: 'i',
                description: messages.getMessage('mdDeployCommandCliJobId'),
                longDescription: messages.getMessage('mdDeployCommandCliJobIdLong'),
                required: false,
                hasValue: true,
                type: 'id'
            },
            // override global descriptions
            {
                name: 'verbose',
                description: messages.getMessage('mdDeployCommandCliVerbose'),
                longDescription: messages.getMessage('mdDeployReportCommandCliVerboseLong'),
                hidden: false
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const MdapiDeployReportCommand = require(path.join(__dirname, '..', '..', 'lib', 'mdapiDeployReportCommand'));
            return _execCommand(new MdapiDeployReportCommand(context), context);
        },
        resolveUsername(context) {
            return context.flags.jobid ? undefined : Stash.get('targetusername', Stash.Commands.MDAPI_DEPLOY);
        }
    };
};

//# sourceMappingURL=mdapi_deploy_report.js.map
