"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Config = require("../../lib/force-cli-config");
const almError = require("../../lib/almError");
const logApi = require("../logApi");
const DataBulkUpsert = require("./dataBulkUpsertCommand");
const fs = require("fs");
const readline = require("readline");
let logger;
class DataBulkDeleteCommand {
    constructor() {
        logger = logApi.child('data:bulk:delete');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let conn = yield Config.getActiveConnection(context);
            let csvRecords;
            try {
                fs.statSync(context.flags.csvfile);
            }
            catch (err) {
                if (err.code === 'ENOENT') {
                    return Promise.reject(almError('PathDoesNotExist', context.flags.csvfile));
                }
                else {
                    throw err;
                }
            }
            csvRecords = fs.createReadStream(context.flags.csvfile);
            let job = conn.bulk.createJob(context.flags.sobjecttype, 'delete');
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                job.on('error', function (err) {
                    reject(err);
                });
                let read = readline.createInterface(csvRecords, undefined);
                let batches = yield DataBulkUpsert.splitIntoBatches(read);
                resolve(yield DataBulkUpsert.createAndExecuteBatches(conn, job, batches, context.flags.sobjecttype, context.flags.wait));
            }));
        });
    }
}
exports.DataBulkDeleteCommand = DataBulkDeleteCommand;

//# sourceMappingURL=dataBulkDeleteCommand.js.map
