/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
const util = require('util');
// Local
const messages = require(path.join(__dirname, '..', 'messages'))();
const logger = require(path.join(__dirname, '..', 'logApi'));
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
const EXPECTED_PREFIX = '05i';
const QUERY = 'SELECT Id, Package2Id, SubscriberPackageVersionId, Name, Description, Tag, Branch, ' +
    'MajorVersion, MinorVersion, PatchVersion, BuildNumber, IsBeta ' +
    'FROM Package2Version ' +
    'WHERE Id = \'%s\' ' +
    'ORDER BY Package2Id, Branch, MajorVersion, MinorVersion, PatchVersion, BuildNumber';
class Package2VersionGetCommand {
    constructor() {
        this.logger = logger.child('package2:version:get');
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.org = context.org;
        this.force = context.org.force;
        if (!context.flags.package2versionid.startsWith(EXPECTED_PREFIX)) {
            throw new Error(messages.getMessage('invalidId', ['Package2 Version Id', context.flags.package2versionid, EXPECTED_PREFIX], 'package2_version_get'));
        }
        return this.force.toolingQuery(this.org, util.format(QUERY, context.flags.package2versionid))
            .then((queryResult) => {
            const results = [];
            const records = queryResult.records;
            if (records && records.length > 0) {
                const record = records[0];
                record.Version = [record.MajorVersion, record.MinorVersion, record.PatchVersion, record.BuildNumber].join('.');
                record.Released = !record.IsBeta || false;
                return context.flags.json ? record : [
                    { key: messages.getMessage('name', [], 'package2_version_list'), value: record.Name },
                    { key: 'Id', value: record.Id },
                    { key: messages.getMessage('package2Id', [], 'package2_version_list'), value: record.Package2Id },
                    { key: messages.getMessage('subscriberPackageVersionId', [], 'package2_version_list'),
                        value: record.SubscriberPackageVersionId },
                    { key: messages.getMessage('version', [], 'package2_version_list'), value: record.Version },
                    { key: messages.getMessage('description', [], 'package2_version_list'), value: record.Description },
                    { key: messages.getMessage('package2Branch', [], 'package2_version_list'), value: record.Branch },
                    { key: messages.getMessage('package2Tag', [], 'package2_version_list'), value: record.Tag },
                    { key: 'Released', value: record.Released.toString() }
                ];
            }
            return results;
        });
    }
    /**
     * indicates that the human readable message should be tabular
     * @returns {[{}...]}
     */
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue('Package2 Version'));
        return [
            { key: 'key', label: 'Name' },
            { key: 'value', label: 'Value' }
        ];
    }
}
Package2VersionGetCommand.QUERY = QUERY;
module.exports = Package2VersionGetCommand;

//# sourceMappingURL=package2VersionGetCommand.js.map
