/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
const path = require('path');
const Promise = require('bluebird');
const srcDevUtil = require(path.join('..', 'lib', 'srcDevUtil'));
const ActiveScratchOrgDeleteApi = require(path.join(__dirname, 'activeScratchOrgDeleteApi'));
const messages = require(path.join(__dirname, 'messages'))();
class OrgDeleteCommand {
    execute(context) {
        const activeScratchOrgDeleteApi = new ActiveScratchOrgDeleteApi();
        let orgData;
        return this.org.getConfig()
            .then((_orgData) => {
            orgData = _orgData;
        })
            .then(() => activeScratchOrgDeleteApi.doDelete(this.org, context.targetdevhubusername))
            .catch({ name: 'attemptingToDeleteExpiredOrDeleted' }, () => {
            this.alreadyDeleted = true;
        })
            .then(() => this.org.deleteConfig())
            .then(() => ({
            orgId: orgData.orgId,
            username: orgData.userName
        }));
    }
    validate(context) {
        this.org = context.org;
        const fixedContext = srcDevUtil.fixCliContext(context);
        this.username = fixedContext.targetusername;
        return Promise.resolve(fixedContext);
    }
    getHumanSuccessMessage() {
        if (this.alreadyDeleted) {
            return messages.getMessage('deleteOrgConfigOnlyCommandSuccess', this.username);
        }
        else {
            return messages.getMessage('deleteOrgCommandSuccess', this.username);
        }
    }
}
module.exports = OrgDeleteCommand;

//# sourceMappingURL=activeScratchOrgDeleteCommand.js.map
