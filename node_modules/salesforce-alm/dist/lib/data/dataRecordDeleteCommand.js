"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
const DataRecordUtils = require("./dataRecordUtils");
let logger;
class DataRecordDeleteCommand {
    constructor() {
        logger = logApi.child('data:record:delete');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            DataRecordUtils.validateIdXorWhereFlags(context);
            const conn = yield Config.getActiveConnection(context);
            const sobjectid = yield DataRecordUtils.retrieveId(conn, context);
            const result = context.flags.usetoolingapi ?
                yield conn.tooling.destroy(context.flags.sobjecttype, sobjectid) : yield conn.sobject(context.flags.sobjecttype).destroy(sobjectid);
            if (result.success) {
                Display.success(Messages.get('DataRecordDeleteSuccess', sobjectid));
            }
            else {
                let errors = '';
                if (result.errors) {
                    errors = '\nErrors:\n';
                    result.errors.forEach(function (err) {
                        errors += '  ' + err + '\n';
                    });
                }
                Display.failure(Messages.get('DataRecordDeleteFailure', errors));
            }
            return result;
        });
    }
}
exports.DataRecordDeleteCommand = DataRecordDeleteCommand;

//# sourceMappingURL=dataRecordDeleteCommand.js.map
