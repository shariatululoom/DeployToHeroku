/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("./command");
const almError = require("./almError");
const _ = require("lodash");
class VarargsCommand extends command_1.default {
    constructor(name, validators) {
        super(name);
        this.validators = validators;
    }
    validate(context) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            // If this command requires variables, throw if none are provided.
            if (_.get(context, 'command.variableArgsRequired') && !_.get(context, 'args.length')) {
                throw almError({ keyName: 'ArgsRequired', bundle: 'varargs_command' }, []);
            }
            // validate the format of the varargs
            if (_.get(context, 'args.length')) {
                this.keyValuePairs = {};
                context.args.forEach(arg => {
                    const split = arg.split('=');
                    if (split.length !== 2) {
                        throw almError({ keyName: 'InvalidArgsFormat', bundle: 'varargs_command' }, [arg]);
                    }
                    const [name, value] = split;
                    if (this.keyValuePairs[name]) {
                        throw almError({ keyName: 'DuplicateArgs', bundle: 'varargs_command' }, [name]);
                    }
                    if (_.get(this, 'validators.length')) {
                        this.validators.forEach(validator => validator(name, value));
                    }
                    this.keyValuePairs[name] = value || undefined;
                });
            }
            return _super("validate").call(this, context);
        });
    }
}
exports.default = VarargsCommand;

//# sourceMappingURL=varargsCommand.js.map
