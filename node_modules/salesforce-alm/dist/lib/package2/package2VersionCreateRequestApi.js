/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
const util = require('util');
const moment = require('moment');
// Local
const messages = require(path.join(__dirname, '..', 'messages'))();
const STATUS_ERROR = 'Error';
const QUERY = 'SELECT Id, Status, Package2Id, Package2VersionId, Package2Version.SubscriberPackageVersionId, Tag, Branch, CreatedDate ' +
    'FROM Package2VersionCreateRequest ' +
    '%s' +
    'ORDER BY CreatedDate';
const ERROR_QUERY = 'SELECT Message FROM Package2VersionCreateRequestError WHERE ParentRequest.Id = \'%s\' ORDER BY Message';
const STATUSES = ['Queued', 'InProgress', 'Success', 'Error'];
class Package2VersionCreateRequestListApi {
    constructor(force, org) {
        this.force = force;
        this.org = org;
    }
    list(flags = {}) {
        const whereCaluse = this._constructWhere(flags);
        return this._query(util.format(QUERY, whereCaluse));
    }
    _constructWhere(flags = {}) {
        const where = [];
        // filter on created date, days ago: 0 for today, etc
        if (!util.isNullOrUndefined(flags.createdlastdays)) {
            if (isNaN(flags.createdlastdays)) {
                throw new Error(messages.getMessage('invalidDaysNumber', ['createdlastdays', flags.createdlastdays], 'package2'));
            }
            if (parseInt(flags.createdlastdays, 10) < 0) {
                throw new Error(messages.getMessage('invalidDaysNumber', ['createdlastdays', flags.createdlastdays], 'package2'));
            }
            where.push(`CreatedDate = LAST_N_DAYS:${flags.createdlastdays}`);
        }
        // filter on errors
        if (flags.status) {
            const foundStatus = STATUSES.find((status) => status.toLowerCase() === flags.status.toLowerCase());
            if (util.isNullOrUndefined(foundStatus)) {
                const args = [flags.status];
                STATUSES.forEach((status) => { args.push(status); });
                throw new Error(messages.getMessage('invalidStatus', args, 'package2'));
            }
            where.push(`Status = \'${foundStatus}\'`);
        }
        return where.length > 0 ? `WHERE ${where.join(' AND ')}` : '';
    }
    byId(package2VersionCreateRequestId) {
        return this._query(util.format(QUERY, `WHERE Id = '${package2VersionCreateRequestId}' `))
            .then((results) => {
            if (results && results.length === 1 && results[0].Status === STATUS_ERROR) {
                return this.force.toolingQuery(this.org, util.format(ERROR_QUERY, package2VersionCreateRequestId))
                    .then((queryResult) => {
                    if (queryResult.done && queryResult.records && queryResult.records.length > 0) {
                        queryResult.records.forEach((record) => {
                            results[0].Error.push(record.Message);
                        });
                    }
                    return results;
                });
            }
            else {
                return results;
            }
        });
    }
    _query(query) {
        return this.force.toolingQuery(this.org, query).then((queryResult) => {
            let results = [];
            const records = queryResult.records;
            if (records && records.length > 0) {
                results = records.map((record) => ({
                    Id: record.Id,
                    Status: record.Status,
                    Package2Id: record.Package2Id,
                    Package2VersionId: record.Package2VersionId,
                    SubscriberPackageVersionId: (record.Package2Version != null) ? record.Package2Version.SubscriberPackageVersionId : null,
                    Tag: record.Tag,
                    Branch: record.Branch,
                    Error: [],
                    CreatedDate: moment(record.CreatedDate).format('YYYY-MM-DD HH:mm')
                }));
            }
            return results;
        });
    }
}
module.exports = Package2VersionCreateRequestListApi;

//# sourceMappingURL=package2VersionCreateRequestApi.js.map
