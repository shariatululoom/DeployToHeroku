"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
 * Copyright, 1999-2016, salesforce.com
 * All Rights Reserved
 * Company Confidential
 */
const messages = require("../../lib/messages");
const CommandRegistry = require("../../lib/commandRegistry");
module.exports = function (_execCommand) {
    const { getMessage } = messages();
    return {
        description: getMessage('description', [], 'generatePassword'),
        longDescription: getMessage('longDescription', [], 'generatePassword'),
        help: getMessage('help', [], 'generatePassword'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [
            CommandRegistry.TARGET_DEV_HUB_USERNAME_PARAMETER,
            {
                name: 'onbehalfof',
                char: 'o',
                description: getMessage('onbehalfofParam', [], 'generatePassword'),
                longDescription: getMessage('onbehalfofParamLong', [], 'generatePassword'),
                hasValue: true,
                required: false,
                type: 'string',
                array: true
            }
        ],
        run(context) {
            return __awaiter(this, void 0, void 0, function* () {
                const UserPasswordGenerateCommand = require('../../lib/user/userPasswordGenerateCommand').UserPasswordGenerateCommand;
                return yield _execCommand(new UserPasswordGenerateCommand(), context);
            });
        }
    };
};

//# sourceMappingURL=user_password_generate.js.map
