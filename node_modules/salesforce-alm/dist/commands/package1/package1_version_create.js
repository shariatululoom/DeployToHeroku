/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('package1VersionCreateCommandCliDescription'),
        longDescription: messages.getMessage('package1VersionCreateCommandCliDescriptionLong'),
        help: messages.getMessage('package1VersionCreateCommandCliHelp'),
        supportsTargetUsername: true,
        flags: [
            {
                name: 'packageid',
                char: 'i',
                description: messages.getMessage('package1VersionCreateCommandId'),
                longDescription: messages.getMessage('package1VersionCreateCommandIdLong'),
                type: 'id',
                hasValue: true,
                required: true
            },
            {
                name: 'name',
                char: 'n',
                description: messages.getMessage('package1VersionCreateCommandName'),
                longDescription: messages.getMessage('package1VersionCreateCommandNameLong'),
                type: 'string',
                hasValue: true,
                required: true
            },
            {
                name: 'description',
                char: 'd',
                description: messages.getMessage('package1VersionCreateCommandDescription'),
                longDescription: messages.getMessage('package1VersionCreateCommandDescriptionLong'),
                type: 'string',
                hasValue: true,
                required: false
            },
            {
                name: 'version',
                char: 'v',
                description: messages.getMessage('package1VersionCreateCommandVersion'),
                longDescription: messages.getMessage('package1VersionCreateCommandVersionLong'),
                type: 'string',
                hasValue: true,
                required: false
            },
            {
                name: 'managedreleased',
                char: 'm',
                description: messages.getMessage('package1VersionCreateCommandManagedReleased'),
                longDescription: messages.getMessage('package1VersionCreateCommandManagedReleasedLong'),
                type: 'flag',
                hasValue: false,
                required: false
            },
            {
                name: 'releasenotesurl',
                char: 'r',
                description: messages.getMessage('package1VersionCreateCommandReleaseNotes'),
                longDescription: messages.getMessage('package1VersionCreateCommandReleaseNotesLong'),
                type: 'url',
                hasValue: true,
                required: false
            },
            {
                name: 'postinstallurl',
                char: 'p',
                description: messages.getMessage('package1VersionCreateCommandPostInstall'),
                longDescription: messages.getMessage('package1VersionCreateCommandPostInstallLong'),
                type: 'url',
                hasValue: true,
                required: false
            },
            {
                name: 'installationkey',
                char: 'k',
                description: messages.getMessage('package1VersionCreateCommandInstallationKey'),
                longDescription: messages.getMessage('package1VersionCreateCommandInstallationKeyLong'),
                type: 'string',
                hasValue: true,
                required: false
            },
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('package1VersionCreateCommandWait'),
                longDescription: messages.getMessage('package1VersionCreateCommandWaitLong'),
                type: 'number',
                hasValue: true,
                required: false
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {Promise}
         */
        run(context) {
            const Package1VersionCreateCommand = require(path.join(__dirname, '..', '..', 'lib', 'package1', 'package1VersionCreateCommand'));
            return _execCommand(new Package1VersionCreateCommand(), context);
        }
    };
};

//# sourceMappingURL=package1_version_create.js.map
