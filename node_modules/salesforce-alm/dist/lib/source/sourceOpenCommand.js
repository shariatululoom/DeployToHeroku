"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MetadataRegistry = require("../../lib/metadataRegistry");
const OrgOpenCommand = require("../../lib/orgOpenCommand");
const path = require("path");
const fs = require("fs");
const request = require("request");
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
let logger;
class SourceOpenCommand {
    constructor() {
        logger = logApi.child('source:open');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context && context.flags && context.flags.sourcefile) {
                try {
                    let path = fs.realpathSync(context.flags.sourcefile);
                    let editOp = new SourceOpenOperation(context);
                    return yield editOp.execute();
                }
                catch (err) {
                    logger.error(err);
                    throw Error(err.message);
                }
            }
            else {
                throw Error(context.command);
            }
        });
    }
}
exports.SourceOpenCommand = SourceOpenCommand;
class SourceOpenOperation {
    constructor(context, factory) {
        this.context = context;
        if (factory) {
            this.factory = factory;
        }
    }
    set factory(factory) {
        this._factory = factory;
    }
    get factory() {
        if (this._factory === undefined) {
            try {
                let metadataFactory = new MetadataRegistry(this.context.org);
                this._factory = new StrategyFactory(this.context, metadataFactory);
            }
            catch (e) {
                throw remapError(e);
            }
        }
        return this._factory;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let strategy = this.factory.strategize();
                let url = yield strategy.open();
                if (this.context.flags.json) {
                    return url;
                }
                else {
                    Display.info(Messages.get('SourceOpenCommandHumanSuccess', url.orgId, url.username, url.url));
                }
            }
            catch (e) {
                throw Error(Messages.get('SourceOpenCommandHumanError', e.message));
            }
        });
    }
}
exports.SourceOpenOperation = SourceOpenOperation;
function remapError(e) {
    let stack = e.stack;
    if (stack.includes('MetadataRegistry.getTypeDefsByExtension')) {
        return new Error(Messages.get('SourceOpenCommandUnpushedError'));
    }
    else {
        return e;
    }
}
exports.remapError = remapError;
function isSalesforceOneEnabled(cmd, requestApi, context) {
    return __awaiter(this, void 0, void 0, function* () {
        let localContext = Object.assign({}, context, {
            flags: {
                urlonly: true,
                path: 'one/one.app'
            }
        });
        let url = yield cmd.execute(yield cmd.validate(localContext));
        return new Promise((resolve, reject) => {
            requestApi(url.url, (error, response, body) => {
                if (body && !body.includes('lightning/access/orgAccessDenied.jsp')) {
                    resolve(true);
                }
                else {
                    resolve(false);
                }
            });
        });
    });
}
exports.isSalesforceOneEnabled = isSalesforceOneEnabled;
class StrategyFactory {
    constructor(context, metadataRegistry) {
        this.context = context;
        this.metadataRegistry = metadataRegistry;
    }
    strategize() {
        let absoluteFilePath = path.resolve(this.context.flags.sourcefile);
        let type = this.metadataRegistry.getTypeDefinitionByFileName(absoluteFilePath);
        if (type) {
            if (type.metadataName === 'FlexiPage') {
                return new FlexipageStrategy(this.context, new OrgOpenCommand());
            }
        }
        return new DefaultStrategy(this.context, new OrgOpenCommand());
    }
}
exports.StrategyFactory = StrategyFactory;
class FlexipageStrategy {
    constructor(context, cmd) {
        this.context = context;
        this.cmd = cmd;
    }
    deriveFlexipageURL(flexipage) {
        return __awaiter(this, void 0, void 0, function* () {
            let connection = yield Config.getActiveConnection(this.context);
            try {
                let queryResult = yield connection.tooling.query(`SELECT id FROM flexipage WHERE DeveloperName='${flexipage}'`);
                if (queryResult.totalSize === 1 && queryResult.records) {
                    let record = queryResult.records[0];
                    return record.Id;
                }
                else {
                    return FlexipageStrategy.NO_ID;
                }
            }
            catch (err) {
                return FlexipageStrategy.NO_ID;
            }
        });
    }
    setUpOpenContext() {
        return __awaiter(this, void 0, void 0, function* () {
            let openContext = Object.assign({}, this.context);
            let id = yield this.deriveFlexipageURL(path.basename(this.context.flags.sourcefile, '.flexipage-meta.xml'));
            let salesforceOne = yield module.exports.isSalesforceOneEnabled(this.cmd, request, openContext);
            if (id) {
                openContext.flags.path = `/visualEditor/appBuilder.app?pageId=${id}`;
            }
            else {
                if (salesforceOne) {
                    openContext.flags.path = '/one/one.app#/setup/FlexiPageList/home';
                }
                else {
                    openContext.flags.path = '_ui/flexipage/ui/FlexiPageFilterListPage';
                }
            }
            return openContext;
        });
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            let context = yield this.cmd.validate(yield this.setUpOpenContext());
            return yield this.cmd.execute(context);
        });
    }
}
FlexipageStrategy.NO_ID = undefined;
exports.FlexipageStrategy = FlexipageStrategy;
class DefaultStrategy {
    constructor(context, cmd) {
        this.context = context;
        this.cmd = cmd;
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.cmd.execute(yield this.cmd.validate(this.context));
        });
    }
}
exports.DefaultStrategy = DefaultStrategy;

//# sourceMappingURL=sourceOpenCommand.js.map
