"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Error = require("../../lib/force-cli-error");
const Messages = require("../../lib/force-cli-messages");
const TextUtil = require("../../lib/force-cli-textutils");
exports.retrieveId = function (connection, context) {
    return __awaiter(this, void 0, void 0, function* () {
        let sobjectid;
        if (context.flags.where) {
            sobjectid = yield exports.queryByWhere(connection, context.flags.sobjecttype, context.flags.where, context.flags.usetoolingapi);
        }
        else {
            sobjectid = context.flags.sobjectid;
        }
        return sobjectid;
    });
};
exports.queryByWhere = function queryByWhere(connection, sobjectType, keyValueSequence, useToolingApi) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const keyValuePairs = TextUtil.parseKeyValueSequence(keyValueSequence);
            const queryObject = TextUtil.transformKeyValueSequence(keyValuePairs);
            const records = useToolingApi ? yield connection.tooling.sobject(sobjectType).find(queryObject, 'id')
                : yield connection.sobject(sobjectType).find(queryObject, 'id');
            if (!records || records.length === 0) {
                return Error.exitWithMessage(Messages.get('DataRecordGetNoRecord'));
            }
            if (records.length !== 1) {
                Error.exitWithMessage(Messages.get('DataRecordGetMultipleRecords', keyValueSequence, sobjectType, records.length));
            }
            return records[0]['Id'];
        }
        catch (err) {
            return Error.exitWithMessage(err.message);
        }
    });
};
function validateIdXorWhereFlags(context) {
    if (!(context.flags.sobjectid || context.flags.where)) {
        Error.exitWithMessage(Messages.get('DataRecordNeitherSobjectidNorWhereError'));
    }
    if (context.flags.sobjectid && context.flags.where) {
        Error.exitWithMessage(Messages.get('DataRecordBothSobjectidAndWhereError'));
    }
}
exports.validateIdXorWhereFlags = validateIdXorWhereFlags;

//# sourceMappingURL=dataRecordUtils.js.map
