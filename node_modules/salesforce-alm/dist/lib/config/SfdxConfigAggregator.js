/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
const path = require('path');
const _ = require('lodash');
const Promise = require('bluebird');
const SfdxConfig = require(path.join(__dirname, 'SfdxConfig'));
const almError = require(path.join(__dirname, '..', 'almError'));
const propertyToEnvName = property => `SFDX_${_.snakeCase(property).toUpperCase()}`;
const LOCATIONS = {
    GLOBAL: 'Global',
    LOCAL: 'Local',
    ENVIRONMENT: 'Environment'
};
/**
 * Aggregate global and local config files, as well as environment variables for
 * sfdx-config.json. The resolution happens in the following bottom-up order:
 *
 * 1. Environment variables  (SFDX_LOG_LEVEL)
 * 2. Workspace settings  (<workspace-root>/.sfdx/sfdx-config.json)
 * 3. Global settings  ($HOME/.sfdx/sfdx-config.json)
 *
 * The instantiator must first call initialize before being able to get resolved
 * config properties.
 */
class SfdxConfigAggregator {
    /**
     * @constructor
     */
    constructor() {
        this.properties = SfdxConfig.getAllowedProperties();
        try {
            this.localConfig = new SfdxConfig(false);
        }
        catch (err) {
            if (err.name !== 'InvalidProjectWorkspace') {
                throw err;
            }
        }
        this.globalConfig = new SfdxConfig(true);
        this.envVars = this.properties.reduce((obj, property) => {
            const val = process.env[propertyToEnvName(property.key)];
            if (!_.isNil(val)) {
                obj[property.key] = val;
            }
            return obj;
        }, {});
    }
    /**
     * Initialize the aggregator by reading and merging the global and local
     * sfdx config files, then resolving environment variables. This method
     * must be called before getting resolved config properties.
     *
     * @returns {Promise<object>} config Returns the aggregated config object
     */
    initialize() {
        // Global config must be read first so it is on the left hand of the
        // object assign and is overwritten by the local config.
        const promises = [this.globalConfig.read()];
        // We might not be in a project workspace
        if (this.localConfig) {
            promises.push(this.localConfig.read());
        }
        return Promise.all(promises)
            .then(configs => {
            this.config = Object.assign(...configs.filter(_.isObject), this.envVars);
            return this.config;
        });
    }
    /**
     * Get a resolved config property
     *
     * @param {string} key the key of the property
     * @returns {*} the value of the property
     * @throws {Error} Throws error if initialized is not called prior. Or there is an attempt to get a property that's
     * not supported
     */
    get(key) {
        if (this.properties.some((element) => key === element.key)) {
            return this.config[key];
        }
        else {
            throw almError({ keyName: 'UnknownConfigKey', bundle: 'sfdxConfig' }, [key]);
        }
    }
    /**
     * Get a resolved config property
     *
     * @param {string} key the key of the property
     * @returns {*} the value of the property
     * @throws {Error} Throws error is initialized is not called prior
     */
    getInfo(key) {
        const location = this.getLocation(key);
        return {
            key,
            location,
            value: this.get(key),
            path: this.getPath(key),
            isLocal: () => location === LOCATIONS.LOCAL,
            isGlobal: () => location === LOCATIONS.GLOBAL,
            isEnvVar: () => location === LOCATIONS.ENVIRONMENT
        };
    }
    /**
     * Get a resolved config property location.
     *
     * For example, getLocation('logLevel') will return:
     * 1) $SFDX_LOG_LEVEL is resolved to 'Environment'
     * 2) ./.sfdx/sfdx-config.json if resolved to 'Local'
     * 3) ~/.sfdx/sfdx-config.json if resolved to 'Global'
     *
     * Please note that the path returns may be the absolute path instead of
     * "./" and "~/""
     *
     * @param {string} key the key of the property
     * @returns {*} the value of the property
     * @throws {Error} Throws error is initialized is not called prior
     */
    getLocation(key) {
        if (!_.isNil(this.envVars[key])) {
            return LOCATIONS.ENVIRONMENT;
        }
        if (!_.isNil(_.get(this.localConfig, `contents[${key}]`))) {
            return LOCATIONS.LOCAL;
        }
        if (!_.isNil(_.get(this.globalConfig, `contents[${key}]`))) {
            return LOCATIONS.GLOBAL;
        }
        return null;
    }
    /**
     * Get a resolved config property path.
     *
     * For example, getLocation('logLevel') will return:
     * 1) $SFDX_LOG_LEVEL is resolved to an environment variable
     * 2) ./.sfdx/sfdx-config.json if resolved to the local config
     * 3) ~/.sfdx/sfdx-config.json if resolved to the global config
     *
     * Please note that the path returns may be the absolute path instead of
     * "./" and "~/""
     *
     * @param {string} key the key of the property
     * @returns {*} the value of the property
     * @throws {Error} Throws error is initialized is not called prior
     */
    getPath(key) {
        if (!_.isNil(this.envVars[key])) {
            return `\$${propertyToEnvName(key)}`;
        }
        if (!_.isNil(_.get(this.localConfig, `contents[${key}]`))) {
            return this.localConfig.path;
        }
        if (!_.isNil(_.get(this.globalConfig, `contents[${key}]`))) {
            return this.globalConfig.path;
        }
        return null;
    }
    /**
     * Get all resolved config property keys, values, and locations.
     *
     * For example,
     *    [
     *        { key: 'logLevel', val: 'INFO', location: '$SFDX_LOG_LEVEL'}
     *        { key: 'master', val: '<username>', location: './.sfdx/sfdx-config.json'}
     *    ]
     *
     * @returns {*} the value of the property
     * @throws {Error} Throws error is initialized is not called prior
     */
    getConfigInfo() {
        const info = _.map(this.config, (val, key) => this.getInfo(key));
        return _.sortBy(info, 'key');
    }
}
SfdxConfigAggregator.Locations = LOCATIONS;
module.exports = SfdxConfigAggregator;

//# sourceMappingURL=SfdxConfigAggregator.js.map
