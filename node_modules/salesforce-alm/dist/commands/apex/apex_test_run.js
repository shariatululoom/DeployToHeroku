/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join('..', '..', 'lib', 'constants'));
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('apexTestCommandDescription', [], 'apex'),
        longDescription: messages.getMessage('apexTestCommandDescriptionLong', [], 'apex'),
        help: messages.getMessage('apexTestCommandHelp', [], 'apex'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'classnames',
                char: 'n',
                description: messages.getMessage('apexTestCommandParamTestNames', [], 'apex'),
                longDescription: messages.getMessage('apexTestCommandParamTestNamesLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'string',
                array: true,
                xor: ['suitenames']
            }, {
                name: 'suitenames',
                char: 's',
                description: messages.getMessage('apexTestCommandParamTestSuites', [], 'apex'),
                longDescription: messages.getMessage('apexTestCommandParamTestSuitesLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'string',
                array: true
            }, {
                name: 'codecoverage',
                char: 'c',
                description: messages.getMessage('apexCommandParamCodeCoverage', [], 'apex'),
                longDescription: messages.getMessage('apexCommandParamCodeCoverageLong', [], 'apex'),
                hasValue: false,
                required: false,
                type: 'flag'
            }, {
                name: 'outputdir',
                char: 'd',
                description: messages.getMessage('apexCommandParamTestArtifactDir', [], 'apex'),
                longDescription: messages.getMessage('apexCommandParamTestArtifactDirLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'directory'
            }, {
                name: 'testlevel',
                char: 'l',
                description: messages.getMessage('apexTestCommandParamTestLevel', [], 'apex'),
                longDescription: messages.getMessage('apexTestCommandParamTestLevelLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'string',
                values: ['RunLocalTests', 'RunAllTestsInOrg', 'RunSpecifiedTests']
            }, {
                name: 'resultformat',
                char: 'r',
                description: messages.getMessage('apexTestCommandParamReporter', [], 'apex'),
                longDescription: messages.getMessage('apexTestCommandParamReporterLong', [], 'apex'),
                hasValue: true,
                required: false,
                type: 'string',
                values: ['human', 'tap', 'junit', 'json'],
                default: 'human'
            }, {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('streamingWait', []),
                longDescription: messages.getMessage('streamingWaitLong', []),
                hasValue: true,
                required: false,
                type: 'minutes',
                hidden: true,
                min: consts.MIN_STREAM_TIMEOUT_MINUTES,
                default: consts.DEFAULT_STREAM_TIMEOUT_MINUTES
            }, {
                name: 'precompilewait',
                description: messages.getMessage('precompileDescription', [], 'apexPreCompileCommand'),
                longDescription: messages.getMessage('precompileLongDescription', [], 'apexPreCompileCommand'),
                hasValue: true,
                required: false,
                type: 'minutes',
                hidden: true,
                min: consts.DEFAULT_TIMEOUT.minutes,
                default: consts.DEFAULT_TIMEOUT.minutes
            }, {
                name: 'synchronous',
                char: 'y',
                description: messages.getMessage('apexTestCommandParamSynchronous', [], 'apex'),
                longDescription: messages.getMessage('apexTestCommandParamSynchronousLong', [], 'apex'),
                hasValue: false,
                required: false,
                type: 'flag'
            }, {
                name: 'verbose',
                description: messages.getMessage('verboseDescription', [], 'apex'),
                longDescription: messages.getMessage('verboseLongDescription', [], 'apex'),
                hidden: false
            }],
        run(context) {
            const Command = require(path.join('..', '..', 'lib', 'apex', 'apexTestCommand'));
            return _execCommand(new Command(), context);
        }
    };
};

//# sourceMappingURL=apex_test_run.js.map
