"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Messages = require("../../lib/force-cli-messages");
module.exports = function (_execCommand) {
    return {
        command: 'data:record:update',
        description: Messages.get('DataRecordUpdateDescription'),
        longDescription: Messages.get('DataRecordUpdateLongDescription'),
        help: Messages.get('DataRecordUpdateHelp'),
        requiresProject: false,
        args: [],
        flags: [{
                name: 'sobjecttype',
                char: 's',
                hasValue: true,
                required: true,
                hidden: false,
                type: 'string',
                description: Messages.get('DataRecordUpdateSobjectDescription'),
                longDescription: Messages.get('DataRecordUpdateSobjectLongDescription')
            }, {
                name: 'sobjectid',
                char: 'i',
                hasValue: true,
                required: false,
                hidden: false,
                type: 'id',
                description: Messages.get('DataRecordUpdateIdDescription'),
                longDescription: Messages.get('DataRecordUpdateIdLongDescription')
            }, {
                name: 'where',
                char: 'w',
                hasValue: true,
                required: false,
                hidden: false,
                type: 'string',
                description: Messages.get('DataRecordWhereDescription'),
                longDescription: Messages.get('DataRecordWhereLongDescription')
            }, {
                name: 'values',
                char: 'v',
                hasValue: true,
                required: true,
                hidden: false,
                type: 'string',
                description: Messages.get('DataRecordUpdateValuesDescription'),
                longDescription: Messages.get('DataRecordUpdateValuesLongDescription')
            }, {
                name: 'usetoolingapi',
                char: 't',
                hasValue: false,
                required: false,
                hidden: false,
                type: 'flag',
                description: Messages.get('DataRecordUpdateToolingDescription'),
                longDescription: Messages.get('DataRecordUpdateToolingLongDescription')
            }],
        supportsTargetUsername: true,
        run(context) {
            return __awaiter(this, void 0, void 0, function* () {
                const DataRecordUpdateCommand = require('../../lib/data/dataRecordUpdateCommand').DataRecordUpdateCommand;
                return yield _execCommand(new DataRecordUpdateCommand(), context);
            });
        }
    };
};

//# sourceMappingURL=data_record_update.js.map
