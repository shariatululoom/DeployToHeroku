"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const logApi = require("../logApi");
const DataRecordUtils = require("./dataRecordUtils");
let logger;
class DataRecordGetCommand {
    constructor() {
        logger = logApi.child('data:record:get');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            DataRecordUtils.validateIdXorWhereFlags(context);
            const conn = yield Config.getActiveConnection(context);
            const sobjectid = yield DataRecordUtils.retrieveId(conn, context);
            const record = context.flags.usetoolingapi ?
                yield conn.tooling.retrieve(context.flags.sobjecttype, sobjectid) : yield conn.sobject(context.flags.sobjecttype).retrieve(sobjectid);
            Display.record(record);
            return record;
        });
    }
}
exports.DataRecordGetCommand = DataRecordGetCommand;

//# sourceMappingURL=dataRecordGetCommand.js.map
