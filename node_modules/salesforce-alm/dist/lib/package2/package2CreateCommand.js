/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Local
const logger = require(path.join(__dirname, '..', 'logApi'));
const messages = require(path.join(__dirname, '..', 'messages'))();
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
class Package2CreateCommand {
    constructor() {
        this.logger = logger.child('package2:create');
    }
    /**
     * Convert the list of command line options to a JSON object that can be used to create an Package2 entity.
     * @param context
     * @returns {{Name: (string|string|*), Description: (boolean|string|string|*), NamespacePrefix: (string|s)}}
     * @private
     */
    _createPackage2RequestFromContext(context) {
        const namespace = context.flags.nonamespace ? '' : context.org.force.config.getConfigContent().namespace;
        return {
            Name: context.flags.name,
            Description: context.flags.description,
            NamespacePrefix: namespace,
            ContainerOptions: context.flags.containeroptions
        };
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.org = context.org;
        this.force = context.org.force;
        const request = this._createPackage2RequestFromContext(context);
        let package2Id = null;
        return this.force.toolingCreate(this.org, 'Package2', request)
            .then((createResult) => {
            if (!createResult.success) {
                throw new Error(createResult.errors);
            }
            package2Id = createResult.id;
            return this.force.toolingQuery(this.org, `SELECT Id, SubscriberPackageId FROM Package2 WHERE Id='${package2Id}'`);
        })
            .then((queryResult) => {
            if (!queryResult.records || !queryResult.records[0]) {
                throw Error(`Unable to find Package2 with Id: ${package2Id}`);
            }
            const record = queryResult.records[0];
            return { Id: record.Id, SubscriberPackageId: record.SubscriberPackageId };
        });
    }
    /**
     * returns a human readable message for a cli output
     * @param result - the data representing the Package Version
     * @returns {string}
     */
    getHumanSuccessMessage(result) {
        const data = [
            { name: 'Package2 Id', value: result.Id },
            { name: 'Subscriber Package Id', value: result.SubscriberPackageId }
        ];
        this.logger.log(messages.getMessage('humanSuccess', data.map(d => d.value), 'package2_create'));
        this.logger.styledHeader(this.logger.color.blue('Ids'));
        this.logger.table(data, { columns: [
                { key: 'name', label: 'Name' },
                { key: 'value', label: 'Value' }
            ] });
        return '';
    }
}
module.exports = Package2CreateCommand;

//# sourceMappingURL=package2CreateCommand.js.map
