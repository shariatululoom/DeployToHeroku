/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const varargsCommand_1 = require("./varargsCommand");
// Node
const path = require('path');
const util = require('util');
// Thirdparty
const _ = require('lodash');
const Org = require(path.join(__dirname, 'scratchOrgApi'));
const messages = require(path.join(__dirname, 'messages'))();
const srcDevUtil = require(path.join('..', 'lib', 'srcDevUtil'));
const almError = require(path.join(__dirname, 'almError'));
const ShapeRepApi = require(path.join(__dirname, 'shapeRepApi'));
/**
 * Command impl for force:org:shape:delete
 */
class OrgShapeDeleteCommand extends varargsCommand_1.default {
    constructor() {
        super('org:shape:delete');
    }
    /**
     * executes the delete command
     * @param context - the cli context
     * @returns {Promise}
     */
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const orgData = yield this.org.getConfig();
            const deletedShapeIds = yield this.shapeApi.deleteAll();
            const results = { orgId: orgData.orgId, shapeIds: deletedShapeIds };
            return Promise.resolve(results);
        });
    }
    /**
     * secondary validation for the cli.
     * @param context - the cli context.
     * @returns {Promise}
     */
    validate(context) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            // validate varargs
            yield _super("validate").call(this, context);
            this.org = context.org;
            const fixedContext = srcDevUtil.fixCliContext(context);
            const username = fixedContext.targetusername;
            // raise an error if the org does not have the feature enabled
            this.shapeApi = new ShapeRepApi(this.org.force, this.org);
            const enabled = yield this.shapeApi.isFeatureEnabled();
            if (!enabled) {
                return Promise.reject(almError({ keyName: 'noAccess', bundle: 'org_shape_delete' }, [username]));
            }
            return Promise.resolve(fixedContext);
        });
    }
    getHumanSuccessMessage(results) {
        if (_.isEmpty(results.shapeIds)) {
            return messages.getMessage('noShapesHumanSuccess', results.orgId, 'org_shape_delete');
        }
        return messages.getMessage('humanSuccess', results.orgId, 'org_shape_delete');
    }
}
module.exports = OrgShapeDeleteCommand;

//# sourceMappingURL=orgShapeDeleteCommand.js.map
