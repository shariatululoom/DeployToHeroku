/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('lightningTestCommandDescription', [], 'lightning_test'),
        longDescription: messages.getMessage('lightningTestCommandDescriptionLong', [], 'lightning_test'),
        help: messages.getMessage('lightningTestCommandHelp', [], 'lightning_test'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'appname',
                char: 'a',
                description: messages.getMessage('lightningTestCommandParamAppName', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningTestCommandParamAppNameLong', [], 'lightning_test'),
                hasValue: true,
                required: false,
                type: 'string'
            }, {
                name: 'outputdir',
                char: 'd',
                description: messages.getMessage('lightningCommandParamTestArtifactDir', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningCommandParamTestArtifactDirLong', [], 'lightning_test'),
                hasValue: true,
                required: false,
                type: 'directory'
            }, {
                name: 'resultformat',
                char: 'r',
                description: messages.getMessage('lightningTestCommandParamReporter', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningTestCommandParamReporterLong', [], 'lightning_test'),
                hasValue: true,
                required: false,
                type: 'string',
                values: ['human', 'tap', 'junit', 'json'],
                default: 'human'
            }, {
                name: 'configfile',
                char: 'f',
                description: messages.getMessage('lightningTestCommandParamConfig', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningTestCommandParamConfigLong', [], 'lightning_test'),
                hasValue: true,
                required: false,
                type: 'filepath'
            }, {
                name: 'leavebrowseropen',
                char: 'o',
                description: messages.getMessage('lightningTestCommandParamLeaveBrowserOpen', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningTestCommandParamLeaveBrowserOpenLong', [], 'lightning_test'),
                type: 'flag',
                hasValue: false,
                required: false
            }, {
                name: 'timeout',
                char: 't',
                description: messages.getMessage('lightningTestCommandParamTimeout', [], 'lightning_test'),
                longDescription: messages.getMessage('lightningTestCommandParamTimeoutLong', [], 'lightning_test'),
                type: 'number',
                hasValue: true,
                required: false,
                default: 60000
            }],
        run(context) {
            const LightningTestCommand = require(path.join('..', '..', 'lib', 'lightning', 'lightningTestCommand'));
            return _execCommand(new LightningTestCommand(), context);
        }
    };
};

//# sourceMappingURL=lightning_test_run.js.map
