/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
'use strict';
const path = require('path');
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
const consts = require(path.join(__dirname, '..', '..', 'lib', 'constants'));
module.exports = function (_execCommand) {
    const Config = require(path.join(__dirname, '..', '..', 'lib', 'configApi')).Config;
    const configInstance = new Config();
    return {
        description: messages.getMessage('mdRetrieveCommandCliDescription'),
        longDescription: messages.getMessage('mdRetrieveCommandCliLong'),
        help: messages.getMessage('mdRetrieveCommandCliHelp'),
        requiresProject: false,
        supportsTargetUsername: true,
        flags: [{
                name: 'apiversion',
                char: 'a',
                description: messages.getMessage('mdRetrieveCommandCliApiVersion', configInstance.getApiVersion()),
                longDescription: messages.getMessage('mdRetrieveCommandCliApiVersionLong'),
                required: false,
                hasValue: true,
                type: 'number'
            },
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('mdRetrieveCommandCliWait', consts.DEFAULT_MDAPI_RETRIEVE_WAIT_MINUTES),
                longDescription: messages.getMessage('mdRetrieveCommandCliWaitLong', consts.DEFAULT_MDAPI_RETRIEVE_WAIT_MINUTES),
                required: false,
                hasValue: true,
                type: 'minutes'
            },
            {
                name: 'retrievetargetdir',
                char: 'r',
                description: messages.getMessage('mdRetrieveCommandCliRetrieveTargetDir'),
                longDescription: messages.getMessage('mdRetrieveCommandCliRetrieveTargetDirLong'),
                required: true,
                hasValue: true,
                type: 'directory'
            },
            {
                name: 'unpackaged',
                char: 'k',
                description: messages.getMessage('mdRetrieveCommandCliUnpackaged'),
                longDescription: messages.getMessage('mdRetrieveCommandCliUnpackagedLong'),
                required: false,
                hasValue: true,
                type: 'filepath'
            }
            /* TODO,
            {
                name: 'unzip',
                char: 'z',
                description: messages.getMessage('mdRetrieveCommandCliUnzip'),
                longDescription: messages.getMessage('mdRetrieveCommandCliUnzipLong'),
                hasValue: false,
                required: false
            }*/
            ,
            // override global descriptions
            {
                name: 'verbose',
                description: messages.getMessage('mdRetrieveCommandCliVerbose'),
                longDescription: messages.getMessage('mdRetrieveCommandCliVerboseLong'),
                hidden: false
            },
            {
                name: 'sourcedir',
                char: 'd',
                description: messages.getMessage('mdRetrieveCommandCliSourceDir', [consts.WORKSPACE_CONFIG_FILENAME.replace('json', 'xml')]),
                longDescription: messages.getMessage('mdRetrieveCommandCliSourceDirLong'),
                required: false,
                hasValue: true,
                type: 'directory'
            },
            {
                name: 'packagenames',
                char: 'p',
                description: messages.getMessage('mdRetrieveCommandCliPackageNames'),
                longDescription: messages.getMessage('mdRetrieveCommandCliPackageNamesLong'),
                required: false,
                hasValue: true,
                array: true,
                type: 'string'
            },
            {
                name: 'singlepackage',
                char: 's',
                description: messages.getMessage('mdRetrieveCommandCliSinglePackage'),
                longDescription: messages.getMessage('mdRetrieveCommandCliSinglePackageLong'),
                required: false,
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'jobid',
                char: 'i',
                description: messages.getMessage('mdRetrieveCommandCliJobId'),
                longDescription: messages.getMessage('mdRetrieveCommandCliJobIdLong'),
                required: false,
                hasValue: true,
                type: 'id',
                deprecated: {
                    message: messages.getMessage('mdRetrieveCommandCliJobIdDeprecated'),
                    version: '41.0'
                }
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {* }
         */
        run(context) {
            const MdapiRetrieveCommand = require(path.join(__dirname, '..', '..', 'lib', 'mdapiRetrieveCommand'));
            return _execCommand(new MdapiRetrieveCommand(context), context);
        }
    };
};

//# sourceMappingURL=mdapi_retrieve.js.map
