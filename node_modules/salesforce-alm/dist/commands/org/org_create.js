/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint global-require: 0 */
"use strict";
// Node
const path = require('path');
const envTypes = require(path.join(__dirname, '..', '..', 'lib', 'envTypes'));
const consts = require(path.join('..', '..', 'lib', 'constants'));
// Local
const messages = require(path.join(__dirname, '..', '..', 'lib', 'messages'))();
module.exports = function (_execCommand) {
    return {
        description: messages.getMessage('createOrgCommandDescription'),
        longDescription: messages.getMessage('createOrgCommandDescriptionLong'),
        help: messages.getMessage('createOrgCommandHelp'),
        showProgress: true,
        requiresProject: false,
        supportsTargetDevHubUsername: true,
        variableArgs: true,
        orgType: consts.DEFAULT_DEV_HUB_USERNAME,
        flags: [{
                name: 'definitionfile',
                char: 'f',
                description: messages.getMessage('createOrgCommandFile'),
                longDescription: messages.getMessage('createOrgCommandFileLong'),
                hasValue: true,
                required: false,
                type: 'filepath'
            },
            {
                name: 'definitionjson',
                char: 'j',
                description: messages.getMessage('createOrgCommandObject'),
                longDescription: messages.getMessage('createOrgCommandObjectLong'),
                hasValue: true,
                hidden: true,
                required: false,
                type: 'string'
            },
            {
                name: 'nonamespace',
                char: 'n',
                description: messages.getMessage('createOrgCommandNoNamespace'),
                longDescription: messages.getMessage('createOrgCommandNoNamespaceLong'),
                hasValue: false,
                required: false,
                type: 'flag'
            },
            {
                name: 'noancestors',
                char: 'c',
                description: messages.getMessage('createOrgCommandNoAncestors'),
                longDescription: messages.getMessage('createOrgCommandNoAncestorsLong'),
                hasValue: false,
                required: false,
                type: 'flag'
            },
            {
                name: 'clientid',
                char: 'i',
                description: messages.getMessage('createOrgCommandClientId'),
                longDescription: messages.getMessage('createOrgCommandClientIdLong'),
                hasValue: true,
                required: false,
                type: 'string'
            },
            {
                name: 'setdefaultusername',
                char: 's',
                description: messages.getMessage('createOrgCommandSet'),
                longDescription: messages.getMessage('createOrgCommandSetLong'),
                required: false,
                hasValue: false,
                type: 'flag'
            },
            {
                name: 'setalias',
                char: 'a',
                description: messages.getMessage('createOrgCommandAlias'),
                longDescription: messages.getMessage('createOrgCommandAliasLong'),
                hasValue: true,
                required: false,
                type: 'string'
            },
            {
                name: 'env',
                char: 'e',
                description: messages.getMessage('createOrgCommandEnv', envTypes.creatableTypes().toString()),
                longDescription: messages.getMessage('createOrgCommandEnvLong', envTypes.creatableTypes().toString()),
                required: false,
                hasValue: true,
                hidden: true,
                values: envTypes.creatableTypes(),
                type: 'string'
            },
            {
                name: 'wait',
                char: 'w',
                description: messages.getMessage('streamingWait', []),
                longDescription: messages.getMessage('streamingWaitLong', []),
                hasValue: true,
                required: false,
                min: consts.MIN_STREAM_TIMEOUT_MINUTES,
                type: 'minutes',
                default: consts.DEFAULT_STREAM_TIMEOUT_MINUTES
            },
            {
                name: 'durationdays',
                char: 'd',
                description: messages.getMessage('createOrgCommandDuration', []),
                longDescription: messages.getMessage('createOrgCommandDurationLong', []),
                hasValue: true,
                required: false,
                type: 'number'
            }
        ],
        /**
         * the heroku cli hook
         * @param context - the cli context
         * @returns {*  }
         */
        run(context) {
            const heroku = require('heroku-cli-util');
            const ScratchOrgCreateCommand = require(path.join(__dirname, '..', '..', 'lib', 'scratchOrgCreateCommand'));
            const createCommand = new ScratchOrgCreateCommand();
            if (!context.flags.clientid) {
                return _execCommand(createCommand, context);
            }
            else {
                // If the user supplied a specific client ID, we have no way of knowing if it's
                // a certificate-based Connected App or not. Therefore, we have to assume that
                // we'll need the client secret, so prompt the user for it.
                return heroku.prompt(messages.getMessage('stdin', [], 'auth_weblogin'), { mask: true })
                    .then((secret) => {
                    const map = new Map();
                    map.set('secret', secret);
                    return _execCommand(createCommand, context, map);
                });
            }
        }
    };
};

//# sourceMappingURL=org_create.js.map
