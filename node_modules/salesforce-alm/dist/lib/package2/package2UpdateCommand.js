/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Local
const logger = require(path.join(__dirname, '..', 'logApi'));
const messages = require(path.join(__dirname, '..', 'messages'))();
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
class Package2CreateCommand {
    constructor() {
        this.logger = logger.child('package2:update');
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.org = context.org;
        this.force = context.org.force;
        pkg2Utils.validateId(pkg2Utils.BY_LABEL.PACKAGE2_ID, context.flags.package2id);
        const request = {};
        request.Id = context.flags.package2id;
        if (context.flags.name) {
            request.Name = context.flags.name;
        }
        if (context.flags.description) {
            request.Description = context.flags.description;
        }
        return this.force.toolingUpdate(this.org, 'Package2', request)
            .then((updateResult) => {
            if (!updateResult.success) {
                throw new Error(updateResult.errors);
            }
            return updateResult;
        });
    }
    getHumanSuccessMessage(result) {
        return messages.getMessage('humanSuccess', [result.id], 'package2_update');
    }
}
module.exports = Package2CreateCommand;

//# sourceMappingURL=package2UpdateCommand.js.map
