/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
'use strict';
// Node
const path = require('path');
// Local
const messages = require(path.join(__dirname, '..', 'messages'))();
const logger = require(path.join(__dirname, '..', 'logApi'));
const pkg2Utils = require(path.join(__dirname, 'package2Utils'));
const QUERY = 'SELECT Id, SubscriberPackageId, Name, Description, NamespacePrefix, ContainerOptions ' +
    'FROM Package2 ' +
    'ORDER BY NamespacePrefix, Name';
class Package2ListCommand {
    constructor() {
        this.logger = logger.child('package2:list');
        this.results = [];
    }
    execute(context) {
        return this._execute(context)
            .catch((err) => {
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkg2Utils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.org = context.org;
        this.force = this.org.force;
        return this.force.toolingQuery(this.org, QUERY)
            .then((queryResult) => {
            const records = queryResult.records;
            if (records && records.length > 0) {
                this.results = records.map(({ Id, SubscriberPackageId, Name, Description, NamespacePrefix, ContainerOptions }) => ({
                    Id,
                    SubscriberPackageId,
                    Name,
                    Description,
                    NamespacePrefix,
                    ContainerOptions
                }));
            }
            return this.results;
        });
    }
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue(`Package2 Packages [${this.results.length}]`));
        return [
            { key: 'NamespacePrefix', label: messages.getMessage('namespace', [], 'package2_list') },
            { key: 'Name', label: messages.getMessage('name', [], 'package2_list') },
            { key: 'Id', label: messages.getMessage('id', [], 'package2_list') },
            { key: 'SubscriberPackageId', label: messages.getMessage('package2Id', [], 'package2_list') },
            { key: 'Description', label: messages.getMessage('description', [], 'package2_list') },
            { key: 'ContainerOptions', label: messages.getMessage('containerOptions', [], 'package2_list') }
        ];
    }
}
module.exports = Package2ListCommand;

//# sourceMappingURL=package2ListCommand.js.map
