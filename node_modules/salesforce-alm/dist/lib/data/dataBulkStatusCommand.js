"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Display = require("../../lib/force-cli-display");
const Config = require("../../lib/force-cli-config");
const Messages = require("../../lib/force-cli-messages");
const logApi = require("../logApi");
let logger;
class DataBulkStatusCommand {
    constructor() {
        logger = logApi.child('data:bulk:status');
    }
    validate(context) {
    }
    execute(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let conn = yield Config.getActiveConnection(context);
            if (context.flags.jobid && context.flags.batchid) {
                // view batch status
                return yield exports.fetchAndDisplayBatchStatus(conn, context.flags.jobid, context.flags.batchid);
            }
            else {
                // view job status
                return yield exports.fetchAndDisplayJobStatus(conn, context.flags.jobid);
            }
        });
    }
}
exports.DataBulkStatusCommand = DataBulkStatusCommand;
/**
 * get and display the batch status
 * exposed for unit testing
 * @param conn {Connection}
 * @param jobId {string}
 * @param batchId {string}
 */
exports.fetchAndDisplayBatchStatus = function (conn, jobId, batchId) {
    return __awaiter(this, void 0, void 0, function* () {
        let job = yield conn.bulk.job(jobId);
        let found = false;
        let batches = yield job.list();
        batches.forEach(function (batch) {
            if (batch.id === batchId) {
                Display.bulkBatchStatus(batch);
                found = true;
            }
        });
        if (!found) {
            throw new Error(Messages.get('DataBulkStatusNoBatchFound', batchId, jobId));
        }
        return batches;
    });
};
/**
 * get and display the job status; close the job if completed
 * @param conn {Connection}
 * @param jobId {string}
 */
exports.fetchAndDisplayJobStatus = function (conn, jobId, doneCallback) {
    return __awaiter(this, void 0, void 0, function* () {
        let job = conn.bulk.job(jobId);
        let jobInfo = yield job.check();
        if (jobInfo && jobInfo.state !== 'Closed' &&
            (Number(jobInfo.numberBatchesCompleted) + Number(jobInfo.numberBatchesFailed)) === Number(jobInfo.numberBatchesTotal)) {
            jobInfo = yield conn.bulk.job(jobInfo.id).close();
        }
        Display.bulkJobStatus(jobInfo);
        if (doneCallback) {
            doneCallback({ job: jobInfo });
        }
        return jobInfo;
    });
};

//# sourceMappingURL=dataBulkStatusCommand.js.map
